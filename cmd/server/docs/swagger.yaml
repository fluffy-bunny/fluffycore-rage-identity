basePath: /
definitions:
  api.ErrorResponse:
    properties:
      error:
        type: string
      internalCode:
        type: string
    type: object
  api_user_identity_info.Identity:
    properties:
      name:
        type: string
    type: object
  api_user_identity_info.LinkedIdentity:
    properties:
      name:
        type: string
    type: object
  api_user_identity_info.Passkey:
    properties:
      aaguid:
        type: string
      name:
        type: string
    type: object
  api_user_identity_info.UserIdentityInfo:
    properties:
      email:
        type: string
      linkedIdentities:
        items:
          $ref: '#/definitions/api_user_identity_info.LinkedIdentity'
        type: array
      passkeyEligible:
        type: boolean
      passkeys:
        items:
          $ref: '#/definitions/api_user_identity_info.Passkey'
        type: array
    type: object
  api_user_identity_info.UserLinkedAccounts:
    properties:
      identities:
        items:
          $ref: '#/definitions/api_user_identity_info.Identity'
        type: array
    type: object
  api_user_profile.Profile:
    properties:
      familyName:
        type: string
      givenName:
        type: string
      phoneNumber:
        type: string
    type: object
  api_user_remove_passkey.RemovePasskeyRequest:
    properties:
      aaguid:
        type: string
    required:
    - aaguid
    type: object
  api_user_remove_passkey.RemovePasskeyResonse:
    properties:
      aaguid:
        type: string
      error:
        type: string
    type: object
  external_idp.StartExternalIDPLoginRequest:
    properties:
      directive:
        type: string
      slug:
        type: string
    required:
    - directive
    - slug
    type: object
  external_idp.StartExternalIDPLoginResponse:
    properties:
      redirectUri:
        type: string
    type: object
  login_models.DirectiveDisplayPasswordPage:
    properties:
      email:
        type: string
      hasPasskey:
        type: boolean
    type: object
  login_models.DirectiveEmailCodeChallenge:
    properties:
      code:
        type: string
    type: object
  login_models.DirectiveRedirect:
    properties:
      redirectUri:
        type: string
    type: object
  login_models.DirectiveStartExternalLogin:
    properties:
      slug:
        type: string
    type: object
  login_models.LoginPasswordErrorResponse:
    properties:
      email:
        type: string
      reason:
        type: string
    required:
    - email
    type: object
  login_models.LoginPasswordRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  login_models.LoginPasswordResponse:
    properties:
      directive:
        type: string
      directiveEmailCodeChallenge:
        $ref: '#/definitions/login_models.DirectiveEmailCodeChallenge'
      directiveRedirect:
        $ref: '#/definitions/login_models.DirectiveRedirect'
      email:
        type: string
    required:
    - directive
    - email
    type: object
  login_models.LoginPhaseOneRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  login_models.LoginPhaseOneResponse:
    properties:
      directive:
        type: string
      directiveDisplayPasswordPage:
        $ref: '#/definitions/login_models.DirectiveDisplayPasswordPage'
      directiveEmailCodeChallenge:
        $ref: '#/definitions/login_models.DirectiveEmailCodeChallenge'
      directiveRedirect:
        $ref: '#/definitions/login_models.DirectiveRedirect'
      directiveStartExternalLogin:
        $ref: '#/definitions/login_models.DirectiveStartExternalLogin'
      email:
        type: string
    required:
    - directive
    - email
    type: object
  login_models.LogoutRequest:
    type: object
  login_models.LogoutResponse:
    properties:
      directive:
        type: string
      redirectURL:
        type: string
    required:
    - directive
    type: object
  login_models.PasswordResetErrorReason:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - PasswordResetErrorReason_NoError
    - PasswordResetErrorReason_InvalidPassword
  login_models.PasswordResetFinishRequest:
    properties:
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - password
    - passwordConfirm
    type: object
  login_models.PasswordResetFinishResponse:
    properties:
      directive:
        type: string
      errorReason:
        $ref: '#/definitions/login_models.PasswordResetErrorReason'
    required:
    - directive
    type: object
  login_models.PasswordResetStartRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  login_models.PasswordResetStartResponse:
    properties:
      directive:
        type: string
      directiveEmailCodeChallenge:
        $ref: '#/definitions/login_models.DirectiveEmailCodeChallenge'
      email:
        type: string
    required:
    - directive
    - email
    type: object
  login_models.SignupErrorReason:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - SignupErrorReason_NoError
    - SignupErrorReason_InvalidPassword
    - SignupErrorReason_UserAlreadyExists
  login_models.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  login_models.SignupResponse:
    properties:
      directive:
        type: string
      directiveEmailCodeChallenge:
        $ref: '#/definitions/login_models.DirectiveEmailCodeChallenge'
      directiveRedirect:
        $ref: '#/definitions/login_models.DirectiveRedirect'
      directiveStartExternalLogin:
        $ref: '#/definitions/login_models.DirectiveStartExternalLogin'
      email:
        type: string
      errorReason:
        $ref: '#/definitions/login_models.SignupErrorReason'
      message:
        type: string
    required:
    - directive
    - email
    type: object
  login_models.VerifyCodeRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  login_models.VerifyCodeResponse:
    properties:
      directive:
        type: string
      directiveRedirect:
        $ref: '#/definitions/login_models.DirectiveRedirect'
    required:
    - directive
    type: object
  manifest.IDP:
    properties:
      slug:
        type: string
    type: object
  manifest.Manifest:
    properties:
      passkey_enabled:
        type: boolean
      social_idps:
        items:
          $ref: '#/definitions/manifest.IDP'
        type: array
    type: object
  password.VerifyPasswordStrengthRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  password.VerifyPasswordStrengthResponse:
    properties:
      valid:
        type: boolean
    type: object
  verify_username.VerifyUsernameResponse:
    properties:
      passkeyAvailable:
        type: boolean
      userName:
        type: string
    type: object
host: localhost:9044
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /.well-known/jwks:
    get:
      consumes:
      - '*/*'
      description: get the public keys of the server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the public keys of the servere.
      tags:
      - root
  /.well-known/openid-configuration:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show the status of server.
      tags:
      - root
  /api/login-password:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      parameters:
      - description: LoginPasswordRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.LoginPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.LoginPasswordResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/login_models.LoginPasswordErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/login_models.LoginPasswordErrorResponse'
      summary: get the login manifest.
      tags:
      - root
  /api/login-phase-one:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      parameters:
      - description: LoginPhaseOneRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.LoginPhaseOneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.LoginPhaseOneResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get the login manifest.
      tags:
      - root
  /api/logout:
    post:
      consumes:
      - application/json
      description: Logout
      parameters:
      - description: LogoutRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.LogoutResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Logout.
      tags:
      - root
  /api/manifest:
    get:
      description: This is the configuration of the server..
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/manifest.Manifest'
      summary: get the login manifest.
      tags:
      - root
  /api/password-reset-finish:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      parameters:
      - description: PasswordResetStartRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.PasswordResetFinishRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.PasswordResetFinishResponse'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: get the login manifest.
      tags:
      - root
  /api/password-reset-start:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      parameters:
      - description: PasswordResetStartRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.PasswordResetStartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.PasswordResetStartResponse'
      summary: get the login manifest.
      tags:
      - root
  /api/signup:
    post:
      consumes:
      - application/json
      description: verify code
      parameters:
      - description: SignupRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.SignupResponse'
        "302":
          description: Found
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: verify code.
      tags:
      - root
  /api/start-external-login:
    post:
      consumes:
      - '*/*'
      description: starts an external login ceremony with an external IDP.
      parameters:
      - description: StartExternalIDPLoginRequest
        in: body
        name: external_idp
        required: true
        schema:
          $ref: '#/definitions/external_idp.StartExternalIDPLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/external_idp.StartExternalIDPLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: starts an external login ceremony with an external IDP
      tags:
      - root
  /api/user-identity-info:
    get:
      description: get the highlevel UserIdentityInfo post login.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_user_identity_info.UserIdentityInfo'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get the highlevel UserIdentityInfo post login.
      tags:
      - root
  /api/user-linked-accounts:
    get:
      description: get the users linked accounts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_user_identity_info.UserLinkedAccounts'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get the users linked accounts.
      tags:
      - root
  /api/user-linked-accounts/{identity}:
    delete:
      description: delete a users linked identity.
      parameters:
      - description: identity name
        in: path
        name: identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: delete a users linked identity.
      tags:
      - root
  /api/user-profile:
    get:
      description: set user profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_user_profile.Profile'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: set user profile.
      tags:
      - root
    post:
      consumes:
      - application/json
      description: get user profile.
      parameters:
      - description: Profile
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_user_profile.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_user_profile.Profile'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: get user profile.
      tags:
      - root
  /api/user-remove-passkey:
    post:
      description: get the highlevel UserIdentityInfo post login.
      parameters:
      - description: RemovePasskeyRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_user_remove_passkey.RemovePasskeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_user_remove_passkey.RemovePasskeyResonse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_user_remove_passkey.RemovePasskeyResonse'
      summary: get the highlevel UserIdentityInfo post login.
      tags:
      - root
  /api/verify-code:
    post:
      consumes:
      - application/json
      description: verify code
      parameters:
      - description: VerifyCodeRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login_models.VerifyCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login_models.VerifyCodeResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: verify code.
      tags:
      - root
  /api/verify-password-strength:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      parameters:
      - description: LoginPhaseOneRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/password.VerifyPasswordStrengthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/password.VerifyPasswordStrengthResponse'
      summary: get the login manifest.
      tags:
      - root
  /api/verify-username:
    post:
      consumes:
      - application/json
      description: This is the configuration of the server..
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/verify_username.VerifyUsernameResponse'
      summary: get the login manifest.
      tags:
      - root
  /error:
    get:
      consumes:
      - '*/*'
      description: get the error page.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the error page.
      tags:
      - root
  /external-idp:
    post:
      consumes:
      - '*/*'
      description: externalIDP.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: todo
      tags:
      - root
  /forgot-password:
    get:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
    post:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
  /healthz:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show the status of server.
      tags:
      - root
  /oauth2/callback:
    get:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: code requested
        in: query
        name: code
        required: true
        type: string
      - description: state requested
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
  /oidc-login:
    get:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
    post:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
  /oidc/v1/auth:
    get:
      consumes:
      - '*/*'
      description: get the home page.
      parameters:
      - description: client_id requested
        in: query
        name: client_id
        required: true
        type: string
      - description: response_type requested
        in: query
        name: response_type
        required: true
        type: string
      - default: '"openid profile email"'
        description: scope requested
        in: query
        name: scope
        required: true
        type: string
      - description: state requested
        in: query
        name: state
        required: true
        type: string
      - description: redirect_uri requested
        in: query
        name: redirect_uri
        required: true
        type: string
      - description: audience requested
        in: query
        name: audience
        type: string
      - description: PKCE challenge code
        in: query
        name: code_challenge
        type: string
      - default: '"S256"'
        description: PKCE challenge method
        in: query
        name: code_challenge_method
        type: string
      - description: acr_values requested
        in: query
        name: acr_values
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: get the home page.
      tags:
      - root
  /token:
    post:
      consumes:
      - '*/*'
      description: OAuth2 token endpoint.
      parameters:
      - description: response_type requested
        in: query
        name: response_type
        required: true
        type: string
      - default: '"openid profile email"'
        description: scope requested
        in: query
        name: scope
        required: true
        type: string
      - description: state requested
        in: query
        name: state
        required: true
        type: string
      - description: redirect_uri requested
        in: query
        name: redirect_uri
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: OAuth2 token endpoint.
      tags:
      - root
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
