// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/oidc/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RageUserService_CreateRageUser_FullMethodName  = "/proto.oidc.user.RageUserService/CreateRageUser"
	RageUserService_GetRageUser_FullMethodName     = "/proto.oidc.user.RageUserService/GetRageUser"
	RageUserService_UpdateRageUser_FullMethodName  = "/proto.oidc.user.RageUserService/UpdateRageUser"
	RageUserService_ListRageUser_FullMethodName    = "/proto.oidc.user.RageUserService/ListRageUser"
	RageUserService_LinkRageUsers_FullMethodName   = "/proto.oidc.user.RageUserService/LinkRageUsers"
	RageUserService_UnlinkRageUsers_FullMethodName = "/proto.oidc.user.RageUserService/UnlinkRageUsers"
)

// RageUserServiceClient is the client API for RageUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RageUserServiceClient interface {
	// Create user
	CreateRageUser(ctx context.Context, in *CreateRageUserRequest, opts ...grpc.CallOption) (*CreateRageUserResponse, error)
	// Get user
	GetRageUser(ctx context.Context, in *GetRageUserRequest, opts ...grpc.CallOption) (*GetRageUserResponse, error)
	// Update user
	UpdateRageUser(ctx context.Context, in *UpdateRageUserRequest, opts ...grpc.CallOption) (*UpdateRageUserResponse, error)
	// List users
	ListRageUser(ctx context.Context, in *ListRageUserRequest, opts ...grpc.CallOption) (*ListRageUserResponse, error)
	LinkRageUsers(ctx context.Context, in *LinkRageUsersRequest, opts ...grpc.CallOption) (*LinkRageUsersResponse, error)
	UnlinkRageUsers(ctx context.Context, in *UnlinkRageUsersRequest, opts ...grpc.CallOption) (*UnlinkRageUsersResponse, error)
}

type rageUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRageUserServiceClient(cc grpc.ClientConnInterface) RageUserServiceClient {
	return &rageUserServiceClient{cc}
}

func (c *rageUserServiceClient) CreateRageUser(ctx context.Context, in *CreateRageUserRequest, opts ...grpc.CallOption) (*CreateRageUserResponse, error) {
	out := new(CreateRageUserResponse)
	err := c.cc.Invoke(ctx, RageUserService_CreateRageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rageUserServiceClient) GetRageUser(ctx context.Context, in *GetRageUserRequest, opts ...grpc.CallOption) (*GetRageUserResponse, error) {
	out := new(GetRageUserResponse)
	err := c.cc.Invoke(ctx, RageUserService_GetRageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rageUserServiceClient) UpdateRageUser(ctx context.Context, in *UpdateRageUserRequest, opts ...grpc.CallOption) (*UpdateRageUserResponse, error) {
	out := new(UpdateRageUserResponse)
	err := c.cc.Invoke(ctx, RageUserService_UpdateRageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rageUserServiceClient) ListRageUser(ctx context.Context, in *ListRageUserRequest, opts ...grpc.CallOption) (*ListRageUserResponse, error) {
	out := new(ListRageUserResponse)
	err := c.cc.Invoke(ctx, RageUserService_ListRageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rageUserServiceClient) LinkRageUsers(ctx context.Context, in *LinkRageUsersRequest, opts ...grpc.CallOption) (*LinkRageUsersResponse, error) {
	out := new(LinkRageUsersResponse)
	err := c.cc.Invoke(ctx, RageUserService_LinkRageUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rageUserServiceClient) UnlinkRageUsers(ctx context.Context, in *UnlinkRageUsersRequest, opts ...grpc.CallOption) (*UnlinkRageUsersResponse, error) {
	out := new(UnlinkRageUsersResponse)
	err := c.cc.Invoke(ctx, RageUserService_UnlinkRageUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RageUserServiceServer is the server API for RageUserService service.
// All implementations must embed UnimplementedRageUserServiceServer
// for forward compatibility
type RageUserServiceServer interface {
	// Create user
	CreateRageUser(context.Context, *CreateRageUserRequest) (*CreateRageUserResponse, error)
	// Get user
	GetRageUser(context.Context, *GetRageUserRequest) (*GetRageUserResponse, error)
	// Update user
	UpdateRageUser(context.Context, *UpdateRageUserRequest) (*UpdateRageUserResponse, error)
	// List users
	ListRageUser(context.Context, *ListRageUserRequest) (*ListRageUserResponse, error)
	LinkRageUsers(context.Context, *LinkRageUsersRequest) (*LinkRageUsersResponse, error)
	UnlinkRageUsers(context.Context, *UnlinkRageUsersRequest) (*UnlinkRageUsersResponse, error)
	mustEmbedUnimplementedRageUserServiceServer()
}

// UnimplementedRageUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRageUserServiceServer struct {
}

func (UnimplementedRageUserServiceServer) CreateRageUser(context.Context, *CreateRageUserRequest) (*CreateRageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRageUser not implemented")
}
func (UnimplementedRageUserServiceServer) GetRageUser(context.Context, *GetRageUserRequest) (*GetRageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRageUser not implemented")
}
func (UnimplementedRageUserServiceServer) UpdateRageUser(context.Context, *UpdateRageUserRequest) (*UpdateRageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRageUser not implemented")
}
func (UnimplementedRageUserServiceServer) ListRageUser(context.Context, *ListRageUserRequest) (*ListRageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRageUser not implemented")
}
func (UnimplementedRageUserServiceServer) LinkRageUsers(context.Context, *LinkRageUsersRequest) (*LinkRageUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkRageUsers not implemented")
}
func (UnimplementedRageUserServiceServer) UnlinkRageUsers(context.Context, *UnlinkRageUsersRequest) (*UnlinkRageUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkRageUsers not implemented")
}
func (UnimplementedRageUserServiceServer) mustEmbedUnimplementedRageUserServiceServer() {}

// UnsafeRageUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RageUserServiceServer will
// result in compilation errors.
type UnsafeRageUserServiceServer interface {
	mustEmbedUnimplementedRageUserServiceServer()
}

func RegisterRageUserServiceServer(s grpc.ServiceRegistrar, srv RageUserServiceServer) {
	s.RegisterService(&RageUserService_ServiceDesc, srv)
}

func _RageUserService_CreateRageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).CreateRageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_CreateRageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).CreateRageUser(ctx, req.(*CreateRageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RageUserService_GetRageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).GetRageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_GetRageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).GetRageUser(ctx, req.(*GetRageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RageUserService_UpdateRageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).UpdateRageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_UpdateRageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).UpdateRageUser(ctx, req.(*UpdateRageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RageUserService_ListRageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).ListRageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_ListRageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).ListRageUser(ctx, req.(*ListRageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RageUserService_LinkRageUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRageUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).LinkRageUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_LinkRageUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).LinkRageUsers(ctx, req.(*LinkRageUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RageUserService_UnlinkRageUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRageUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RageUserServiceServer).UnlinkRageUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RageUserService_UnlinkRageUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RageUserServiceServer).UnlinkRageUsers(ctx, req.(*UnlinkRageUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RageUserService_ServiceDesc is the grpc.ServiceDesc for RageUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RageUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.oidc.user.RageUserService",
	HandlerType: (*RageUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRageUser",
			Handler:    _RageUserService_CreateRageUser_Handler,
		},
		{
			MethodName: "GetRageUser",
			Handler:    _RageUserService_GetRageUser_Handler,
		},
		{
			MethodName: "UpdateRageUser",
			Handler:    _RageUserService_UpdateRageUser_Handler,
		},
		{
			MethodName: "ListRageUser",
			Handler:    _RageUserService_ListRageUser_Handler,
		},
		{
			MethodName: "LinkRageUsers",
			Handler:    _RageUserService_LinkRageUsers_Handler,
		},
		{
			MethodName: "UnlinkRageUsers",
			Handler:    _RageUserService_UnlinkRageUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oidc/user/user.proto",
}
