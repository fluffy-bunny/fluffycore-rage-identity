syntax = "proto3";

option go_package = "github.com/fluffy-bunny/fluffycore-rage-identity/proto/oidc/user;user";
option java_multiple_files = true;
option java_package = "com.fluffybunny.rageoidc.user";
option csharp_namespace = "FluffyBunny.RageOidc.Oidc.User";


package proto.oidc.user;

import "google/protobuf/descriptor.proto";
import "proto/types/pagination.proto";
import "proto/oidc/models/user.proto";

import "google/api/annotations.proto";


service RageUserService {
    // Create user
    rpc CreateRageUser (CreateRageUserRequest) returns (CreateRageUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_create"
            body: "*"
          };
    }
    // Get user
    rpc GetRageUser (GetRageUserRequest) returns (GetRageUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/subject/{subject}"
          };
    }

    // Update user
    rpc UpdateRageUser (UpdateRageUserRequest) returns (UpdateRageUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_update"
            body: "*"
          };
    }
    // List users
    rpc ListRageUsers (ListRageUsersRequest) returns (ListRageUsersResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_search"
            body: "*"
          };
    }

    rpc LinkRageUser (LinkRageUserRequest) returns (LinkRageUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_link"
            body: "*"
          };
    }
    rpc UnlinkRageUser (UnlinkRageUserRequest) returns (UnlinkRageUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_unlink"
            body: "*"
          };
    }
    rpc IsRageUserLinked (IsRageUserLinkedRequest) returns (IsRageUserLinkedResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/_islinked"
            body: "*"
          };
    }
} 
message IsRageUserLinkedRequest {
    string root_subject = 1;
    proto.oidc.models.Identity external_identity = 2;
}
message IsRageUserLinkedResponse {
    bool is_linked = 1;
}
message LinkRageUserRequest {
    string root_subject = 1;
    proto.oidc.models.Identity external_identity = 2;
}

message LinkRageUserResponse {
    proto.oidc.models.RageUser user = 1;
}

message UnlinkRageUserRequest {
    string root_subject = 1;
    proto.oidc.models.Identity external_identity = 2;
}
message UnlinkRageUserResponse {
    proto.oidc.models.RageUser user = 1;
}

  
message CreateRageUserRequest {
    proto.oidc.models.RageUser user = 1;
}   
message CreateRageUserResponse {
    proto.oidc.models.RageUser user = 1;
}
message GetRageUserRequest {
   string subject = 1;
}
message GetRageUserResponse {
    proto.oidc.models.RageUser user = 1;
}

message UpdateRageUserRequest {
    proto.oidc.models.RageUserUpdate user = 1;
}
message UpdateRageUserResponse {
    proto.oidc.models.RageUser user = 1;
}

message ListRageUsersRequest {
   // Filter
   proto.oidc.models.RageUserFilter filter = 1;

   // Pagination
   proto.types.Pagination pagination = 100;
}

message ListRageUsersResponse {
   repeated proto.oidc.models.RageUser users = 1;

   // Pagination details
   proto.types.PaginationResponse pagination = 100;
}
