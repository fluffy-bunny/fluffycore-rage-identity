// Code generated by protoc-gen-go-fluffycore-di. DO NOT EDIT.
// Code generated grpcGateway

package user

import (
	context "context"
	fluffy_dozm_di "github.com/fluffy-bunny/fluffy-dozm-di"
	endpoint "github.com/fluffy-bunny/fluffycore/contracts/endpoint"
	dicontext "github.com/fluffy-bunny/fluffycore/middleware/dicontext"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

// IFluffyCoreUserServiceServer defines the grpc server
type IFluffyCoreUserServiceServer interface {
	UserServiceServer
}

type UnimplementedFluffyCoreUserServiceServerEndpointRegistration struct {
}

func (UnimplementedFluffyCoreUserServiceServerEndpointRegistration) RegisterFluffyCoreHandler(gwmux *runtime.ServeMux, conn *grpc.ClientConn) {
}

// UserServiceFluffyCoreServer defines the grpc server truct
type UserServiceFluffyCoreServer struct {
	UnimplementedUserServiceServer
	UnimplementedFluffyCoreUserServiceServerEndpointRegistration
}

// RegisterFluffyCoreGRPCService the server with grpc
func (srv *UserServiceFluffyCoreServer) RegisterFluffyCoreGRPCService(s *grpc.Server) {
	RegisterUserServiceServer(s, srv)
}

// AddUserServiceServerWithExternalRegistration adds the fluffycore aware grpc server and external registration service.  Mainly used for grpc-gateway
func AddUserServiceServerWithExternalRegistration(cb fluffy_dozm_di.ContainerBuilder, ctor any, register func() endpoint.IEndpointRegistration) {
	fluffy_dozm_di.AddSingleton[endpoint.IEndpointRegistration](cb, register)
	fluffy_dozm_di.AddScoped[IFluffyCoreUserServiceServer](cb, ctor)
}

// AddUserServiceServer adds the fluffycore aware grpc server
func AddUserServiceServer(cb fluffy_dozm_di.ContainerBuilder, ctor any) {
	AddUserServiceServerWithExternalRegistration(cb, ctor, func() endpoint.IEndpointRegistration {
		return &UserServiceFluffyCoreServer{}
	})
}

// CreateUser...
func (s *UserServiceFluffyCoreServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.CreateUser(ctx, request)
}

// GetUser...
func (s *UserServiceFluffyCoreServer) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.GetUser(ctx, request)
}

// DeleteUser...
func (s *UserServiceFluffyCoreServer) DeleteUser(ctx context.Context, request *DeleteUserRequest) (*DeleteUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.DeleteUser(ctx, request)
}

// UpdateUser...
func (s *UserServiceFluffyCoreServer) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*UpdateUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.UpdateUser(ctx, request)
}

// ListUser...
func (s *UserServiceFluffyCoreServer) ListUser(ctx context.Context, request *ListUserRequest) (*ListUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.ListUser(ctx, request)
}

// LinkUsers...
func (s *UserServiceFluffyCoreServer) LinkUsers(ctx context.Context, request *LinkUsersRequest) (*LinkUsersResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.LinkUsers(ctx, request)
}

// UnlinkUsers...
func (s *UserServiceFluffyCoreServer) UnlinkUsers(ctx context.Context, request *UnlinkUsersRequest) (*UnlinkUsersResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreUserServiceServer](requestContainer)
	return downstreamService.UnlinkUsers(ctx, request)
}
