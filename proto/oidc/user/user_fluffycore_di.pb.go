// Code generated by protoc-gen-go-fluffycore-di. DO NOT EDIT.
// Code generated grpcGateway

package user

import (
	context "context"
	fluffy_dozm_di "github.com/fluffy-bunny/fluffy-dozm-di"
	endpoint "github.com/fluffy-bunny/fluffycore/contracts/endpoint"
	dicontext "github.com/fluffy-bunny/fluffycore/middleware/dicontext"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

// IFluffyCoreRageUserServiceServer defines the grpc server
type IFluffyCoreRageUserServiceServer interface {
	RageUserServiceServer
}

type UnimplementedFluffyCoreRageUserServiceServerEndpointRegistration struct {
}

func (UnimplementedFluffyCoreRageUserServiceServerEndpointRegistration) RegisterFluffyCoreHandler(gwmux *runtime.ServeMux, conn *grpc.ClientConn) {
}

// RageUserServiceFluffyCoreServer defines the grpc server truct
type RageUserServiceFluffyCoreServer struct {
	UnimplementedRageUserServiceServer
	UnimplementedFluffyCoreRageUserServiceServerEndpointRegistration
}

// RegisterFluffyCoreGRPCService the server with grpc
func (srv *RageUserServiceFluffyCoreServer) RegisterFluffyCoreGRPCService(s *grpc.Server) {
	RegisterRageUserServiceServer(s, srv)
}

// AddRageUserServiceServerWithExternalRegistration adds the fluffycore aware grpc server and external registration service.  Mainly used for grpc-gateway
func AddRageUserServiceServerWithExternalRegistration(cb fluffy_dozm_di.ContainerBuilder, ctor any, register func() endpoint.IEndpointRegistration) {
	fluffy_dozm_di.AddSingleton[endpoint.IEndpointRegistration](cb, register)
	fluffy_dozm_di.AddScoped[IFluffyCoreRageUserServiceServer](cb, ctor)
}

// AddRageUserServiceServer adds the fluffycore aware grpc server
func AddRageUserServiceServer(cb fluffy_dozm_di.ContainerBuilder, ctor any) {
	AddRageUserServiceServerWithExternalRegistration(cb, ctor, func() endpoint.IEndpointRegistration {
		return &RageUserServiceFluffyCoreServer{}
	})
}

// CreateRageUser...
func (s *RageUserServiceFluffyCoreServer) CreateRageUser(ctx context.Context, request *CreateRageUserRequest) (*CreateRageUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.CreateRageUser(ctx, request)
}

// GetRageUser...
func (s *RageUserServiceFluffyCoreServer) GetRageUser(ctx context.Context, request *GetRageUserRequest) (*GetRageUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.GetRageUser(ctx, request)
}

// UpdateRageUser...
func (s *RageUserServiceFluffyCoreServer) UpdateRageUser(ctx context.Context, request *UpdateRageUserRequest) (*UpdateRageUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.UpdateRageUser(ctx, request)
}

// ListRageUsers...
func (s *RageUserServiceFluffyCoreServer) ListRageUsers(ctx context.Context, request *ListRageUsersRequest) (*ListRageUsersResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.ListRageUsers(ctx, request)
}

// LinkRageUser...
func (s *RageUserServiceFluffyCoreServer) LinkRageUser(ctx context.Context, request *LinkRageUserRequest) (*LinkRageUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.LinkRageUser(ctx, request)
}

// UnlinkRageUser...
func (s *RageUserServiceFluffyCoreServer) UnlinkRageUser(ctx context.Context, request *UnlinkRageUserRequest) (*UnlinkRageUserResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.UnlinkRageUser(ctx, request)
}

// IsRageUserLinked...
func (s *RageUserServiceFluffyCoreServer) IsRageUserLinked(ctx context.Context, request *IsRageUserLinkedRequest) (*IsRageUserLinkedResponse, error) {
	requestContainer := dicontext.GetRequestContainer(ctx)
	downstreamService := fluffy_dozm_di.Get[IFluffyCoreRageUserServiceServer](requestContainer)
	return downstreamService.IsRageUserLinked(ctx, request)
}
