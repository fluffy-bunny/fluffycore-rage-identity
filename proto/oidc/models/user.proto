syntax = "proto3";

option go_package = "github.com/fluffy-bunny/fluffycore-rage-identity/proto/oidc/models;models";
 


package proto.oidc.models;

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";
import "proto/types/filter.proto";
import "proto/types/webauthn/webauthn.proto";

enum RageUserState {
    USER_STATE_UNSPECIFIED = 0;
    USER_STATE_ACTIVE = 1;
    USER_STATE_DISABLED = 2;
    USER_STATE_DELETED = 3;
    USER_STATE_PENDING = 4;
}

message RageUserStateValue {
    RageUserState value = 1;
}
message Password {
    string  hash = 1;
}
message PasswordUpdate {
    google.protobuf.StringValue hash = 1;
}
message Identity {
    string subject = 1;
    string idp_slug = 2;
    string email = 3;
    bool email_verified = 4;
}
message IdentityFilter {
    proto.types.IDFilterExpression           subject = 1;
    proto.types.IDFilterExpression           idp_slug = 2;
    proto.types.StringFilterExpression       email = 3;

}
message OIDCIdentity {
    string subject = 1;
    string idp_slug = 2;
    string email = 3;
    bool email_verified = 4;
    repeated string acr = 5;
    repeated string amr = 6;
}
message ExternalOauth2Request {
    string idp_hint = 1;
    string client_id = 2;
    string code_challenge = 3;
    string code_challenge_method = 4;
    string state = 5;
    string code_challenge_verifier = 6;
    string nonce = 7;
    string directive = 8;
    string parent_state = 9;

}
message ExternalOauth2State {
    ExternalOauth2Request request = 1;
    Identity identity = 2;
}
message AuthorizationRequest {
    string client_id = 1;
    string response_type = 2;
    string scope = 3;
    string state = 4;
    string redirect_uri = 5;
    string audience = 6;
    string code_challenge = 7;
    string code_challenge_method = 8;
    string acr_values = 9;
    string nonce = 10;
    // this is the internal code that will be returned to the OIDC client
    string code = 11;
    // IDPHint is the idp_hint of the external idp that the authorization must authenticate against
    string idp_hint = 12;
    // CandidateUserID is the user_id of the candidate user that if the external IDP has no link should be linked to
    // The candidate user must exist.
    string candidate_user_id = 13;
}

message AuthorizationRequestState {
    // id to make it db friendly
    string id = 1;
    AuthorizationRequest request = 2;
    OIDCIdentity identity = 3;
    Identity external_identity = 4;
    string directive = 5;

}

message LinkedIdentities{
    repeated Identity identities = 1;
}

message IdentityUpdate {
    string subject = 1;
    google.protobuf.StringValue email = 3;
    google.protobuf.BoolValue email_verified = 4;

}


message LinkedIdentitiesUpdate {
    message Granular{
        repeated Identity add = 1;
        repeated Identity remove = 2;
     }
    oneof update {
        Granular            granular = 1;
        LinkedIdentities    replace = 2;
    }
}
message Email {
    string email = 1;
    bool email_verified = 2;
}
message EmailUpdate {
    google.protobuf.StringValue email = 1;
    google.protobuf.BoolValue email_verified = 2;
}
message Recovery{
    // only one email is allowed.  Make this simple
    Email email = 1;
}
message RecoveryUpdate{
    EmailUpdate email = 1;
}

message WebAuthN {
    repeated proto.types.webauthn.Credential credentials = 1;
}
message WebAuthNUpdate {
    proto.types.webauthn.CredentialArrayUpdate credentials = 1;
}
message TOTP {
    string secret = 1;
    bool enabled = 2;
    bool verified = 3;
}
message TOTPUpdate {
    google.protobuf.BoolValue enabled = 2;
    google.protobuf.BoolValue verified = 3;
}
message RageUser {
    RageUserState       state = 2;
    Identity            root_identity = 3;
    LinkedIdentities    linked_identities = 4;
    Recovery            recovery = 5;
    Password            password = 6;
    WebAuthN            web_auth_n = 7;
    TOTP                t_o_t_p = 8;

}
message RageUsers {
    repeated RageUser users = 1;
}
message RageUserUpdate {
    IdentityUpdate          root_identity = 1;
    RageUserStateValue      state = 2;
    LinkedIdentitiesUpdate  linked_identities = 3;
    RecoveryUpdate          recovery = 4;
    PasswordUpdate          password = 5;
    WebAuthNUpdate          web_auth_n = 6;
    TOTPUpdate              t_o_t_p = 7;
 }


 message RageUserFilter {
    proto.types.IDFilterExpression       root_subject = 1;
    proto.types.IDFilterExpression       root_idp_slug = 2  ;
    proto.types.StringFilterExpression   root_email = 3;

    proto.types.IDFilterExpression       linked_identity_subject = 4;
    proto.types.IDFilterExpression       linked_identity_idp_slug = 5;
    proto.types.StringFilterExpression   linked_identity_email = 6;

}
 