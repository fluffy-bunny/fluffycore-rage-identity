// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: proto/oidc/models/client.proto

package models

import (
	types "github.com/fluffy-bunny/fluffycore-rage-identity/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Claim_StringValue
	//	*Claim_BoolValue
	//	*Claim_Int64Value
	//	*Claim_DoubleValue
	//	*Claim_StringValues
	//	*Claim_Int64Values
	//	*Claim_DoubleValues
	Value isClaim_Value `protobuf_oneof:"value"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{0}
}

func (x *Claim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *Claim) GetValue() isClaim_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Claim) GetStringValue() string {
	if x, ok := x.GetValue().(*Claim_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Claim) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Claim_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Claim) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Claim_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Claim) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Claim_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Claim) GetStringValues() *types.StringValues {
	if x, ok := x.GetValue().(*Claim_StringValues); ok {
		return x.StringValues
	}
	return nil
}

func (x *Claim) GetInt64Values() *types.Int64Values {
	if x, ok := x.GetValue().(*Claim_Int64Values); ok {
		return x.Int64Values
	}
	return nil
}

func (x *Claim) GetDoubleValues() *types.DoubleValues {
	if x, ok := x.GetValue().(*Claim_DoubleValues); ok {
		return x.DoubleValues
	}
	return nil
}

type isClaim_Value interface {
	isClaim_Value()
}

type Claim_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Claim_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Claim_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Claim_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Claim_StringValues struct {
	StringValues *types.StringValues `protobuf:"bytes,6,opt,name=string_values,json=stringValues,proto3,oneof"`
}

type Claim_Int64Values struct {
	Int64Values *types.Int64Values `protobuf:"bytes,7,opt,name=int64_values,json=int64Values,proto3,oneof"`
}

type Claim_DoubleValues struct {
	DoubleValues *types.DoubleValues `protobuf:"bytes,8,opt,name=double_values,json=doubleValues,proto3,oneof"`
}

func (*Claim_StringValue) isClaim_Value() {}

func (*Claim_BoolValue) isClaim_Value() {}

func (*Claim_Int64Value) isClaim_Value() {}

func (*Claim_DoubleValue) isClaim_Value() {}

func (*Claim_StringValues) isClaim_Value() {}

func (*Claim_Int64Values) isClaim_Value() {}

func (*Claim_DoubleValues) isClaim_Value() {}

type ClaimsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Claim `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ClaimsValue) Reset() {
	*x = ClaimsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsValue) ProtoMessage() {}

func (x *ClaimsValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimsValue.ProtoReflect.Descriptor instead.
func (*ClaimsValue) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{1}
}

func (x *ClaimsValue) GetValues() []*Claim {
	if x != nil {
		return x.Values
	}
	return nil
}

type ClaimsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*ClaimsUpdate_Granular_
	//	*ClaimsUpdate_Replace
	Update isClaimsUpdate_Update `protobuf_oneof:"update"`
}

func (x *ClaimsUpdate) Reset() {
	*x = ClaimsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsUpdate) ProtoMessage() {}

func (x *ClaimsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimsUpdate.ProtoReflect.Descriptor instead.
func (*ClaimsUpdate) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{2}
}

func (m *ClaimsUpdate) GetUpdate() isClaimsUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ClaimsUpdate) GetGranular() *ClaimsUpdate_Granular {
	if x, ok := x.GetUpdate().(*ClaimsUpdate_Granular_); ok {
		return x.Granular
	}
	return nil
}

func (x *ClaimsUpdate) GetReplace() *ClaimsValue {
	if x, ok := x.GetUpdate().(*ClaimsUpdate_Replace); ok {
		return x.Replace
	}
	return nil
}

type isClaimsUpdate_Update interface {
	isClaimsUpdate_Update()
}

type ClaimsUpdate_Granular_ struct {
	Granular *ClaimsUpdate_Granular `protobuf:"bytes,1,opt,name=granular,proto3,oneof"`
}

type ClaimsUpdate_Replace struct {
	Replace *ClaimsValue `protobuf:"bytes,2,opt,name=replace,proto3,oneof"`
}

func (*ClaimsUpdate_Granular_) isClaimsUpdate_Update() {}

func (*ClaimsUpdate_Replace) isClaimsUpdate_Update() {}

type ClientSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExpirationUnix int64  `protobuf:"varint,3,opt,name=expiration_unix,json=expirationUnix,proto3" json:"expiration_unix,omitempty"`
	Hash           string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ClientSecret) Reset() {
	*x = ClientSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSecret) ProtoMessage() {}

func (x *ClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSecret.ProtoReflect.Descriptor instead.
func (*ClientSecret) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{3}
}

func (x *ClientSecret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientSecret) GetExpirationUnix() int64 {
	if x != nil {
		return x.ExpirationUnix
	}
	return 0
}

func (x *ClientSecret) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ClientSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExpirationUnix int64  `protobuf:"varint,3,opt,name=expiration_unix,json=expirationUnix,proto3" json:"expiration_unix,omitempty"`
	Secret         string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *ClientSecretResponse) Reset() {
	*x = ClientSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSecretResponse) ProtoMessage() {}

func (x *ClientSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSecretResponse.ProtoReflect.Descriptor instead.
func (*ClientSecretResponse) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{4}
}

func (x *ClientSecretResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientSecretResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientSecretResponse) GetExpirationUnix() int64 {
	if x != nil {
		return x.ExpirationUnix
	}
	return 0
}

func (x *ClientSecretResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type ClientSecretsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*ClientSecretsUpdate_RemoveByIds
	//	*ClientSecretsUpdate_RemoveAll
	Update        isClientSecretsUpdate_Update `protobuf_oneof:"update"`
	RemoveExpired bool                         `protobuf:"varint,3,opt,name=remove_expired,json=removeExpired,proto3" json:"remove_expired,omitempty"`
}

func (x *ClientSecretsUpdate) Reset() {
	*x = ClientSecretsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSecretsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSecretsUpdate) ProtoMessage() {}

func (x *ClientSecretsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSecretsUpdate.ProtoReflect.Descriptor instead.
func (*ClientSecretsUpdate) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{5}
}

func (m *ClientSecretsUpdate) GetUpdate() isClientSecretsUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ClientSecretsUpdate) GetRemoveByIds() *ClientSecretsUpdate_ByIds {
	if x, ok := x.GetUpdate().(*ClientSecretsUpdate_RemoveByIds); ok {
		return x.RemoveByIds
	}
	return nil
}

func (x *ClientSecretsUpdate) GetRemoveAll() *wrapperspb.BoolValue {
	if x, ok := x.GetUpdate().(*ClientSecretsUpdate_RemoveAll); ok {
		return x.RemoveAll
	}
	return nil
}

func (x *ClientSecretsUpdate) GetRemoveExpired() bool {
	if x != nil {
		return x.RemoveExpired
	}
	return false
}

type isClientSecretsUpdate_Update interface {
	isClientSecretsUpdate_Update()
}

type ClientSecretsUpdate_RemoveByIds struct {
	RemoveByIds *ClientSecretsUpdate_ByIds `protobuf:"bytes,1,opt,name=remove_by_ids,json=removeByIds,proto3,oneof"`
}

type ClientSecretsUpdate_RemoveAll struct {
	RemoveAll *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=remove_all,json=removeAll,proto3,oneof"`
}

func (*ClientSecretsUpdate_RemoveByIds) isClientSecretsUpdate_Update() {}

func (*ClientSecretsUpdate_RemoveAll) isClientSecretsUpdate_Update() {}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                                string                `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Enabled                                 bool                  `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientName                              string                `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	Description                             string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Namespace                               string                `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RequireRefreshClientSecret              bool                  `protobuf:"varint,6,opt,name=require_refresh_client_secret,json=requireRefreshClientSecret,proto3" json:"require_refresh_client_secret,omitempty"`
	AllowOfflineAccess                      bool                  `protobuf:"varint,7,opt,name=allow_offline_access,json=allowOfflineAccess,proto3" json:"allow_offline_access,omitempty"`
	UpdateAccessTokenClaimsOnRefresh        bool                  `protobuf:"varint,8,opt,name=update_access_token_claims_on_refresh,json=updateAccessTokenClaimsOnRefresh,proto3" json:"update_access_token_claims_on_refresh,omitempty"`
	IncludeJwtId                            bool                  `protobuf:"varint,9,opt,name=include_jwt_id,json=includeJwtId,proto3" json:"include_jwt_id,omitempty"`
	AlwaysSendClientClaims                  bool                  `protobuf:"varint,10,opt,name=always_send_client_claims,json=alwaysSendClientClaims,proto3" json:"always_send_client_claims,omitempty"`
	AlwaysIncludeUserClaimsInIdToken        bool                  `protobuf:"varint,11,opt,name=always_include_user_claims_in_id_token,json=alwaysIncludeUserClaimsInIdToken,proto3" json:"always_include_user_claims_in_id_token,omitempty"`
	RequireClientSecret                     bool                  `protobuf:"varint,12,opt,name=require_client_secret,json=requireClientSecret,proto3" json:"require_client_secret,omitempty"`
	AccessTokenLifetime                     uint64                `protobuf:"varint,13,opt,name=access_token_lifetime,json=accessTokenLifetime,proto3" json:"access_token_lifetime,omitempty"`
	AbsoluteRefreshTokenLifetime            uint64                `protobuf:"varint,14,opt,name=absolute_refresh_token_lifetime,json=absoluteRefreshTokenLifetime,proto3" json:"absolute_refresh_token_lifetime,omitempty"`
	SlidingRefreshTokenLifetime             uint64                `protobuf:"varint,15,opt,name=sliding_refresh_token_lifetime,json=slidingRefreshTokenLifetime,proto3" json:"sliding_refresh_token_lifetime,omitempty"`
	IdentityTokenLifetime                   uint64                `protobuf:"varint,16,opt,name=identity_token_lifetime,json=identityTokenLifetime,proto3" json:"identity_token_lifetime,omitempty"`
	RefreshTokenGraceEnabled                bool                  `protobuf:"varint,17,opt,name=refresh_token_grace_enabled,json=refreshTokenGraceEnabled,proto3" json:"refresh_token_grace_enabled,omitempty"`
	RefreshTokenGraceTtl                    uint64                `protobuf:"varint,18,opt,name=refresh_token_grace_ttl,json=refreshTokenGraceTtl,proto3" json:"refresh_token_grace_ttl,omitempty"`
	RefreshTokenGraceMaxAttempts            uint64                `protobuf:"varint,19,opt,name=refresh_token_grace_max_attempts,json=refreshTokenGraceMaxAttempts,proto3" json:"refresh_token_grace_max_attempts,omitempty"`
	RefreshTokenUsage                       uint64                `protobuf:"varint,20,opt,name=refresh_token_usage,json=refreshTokenUsage,proto3" json:"refresh_token_usage,omitempty"`
	RefreshTokenExpiration                  uint64                `protobuf:"varint,21,opt,name=refresh_token_expiration,json=refreshTokenExpiration,proto3" json:"refresh_token_expiration,omitempty"`
	AccessTokenType                         uint64                `protobuf:"varint,22,opt,name=access_token_type,json=accessTokenType,proto3" json:"access_token_type,omitempty"`
	Claims                                  []*Claim              `protobuf:"bytes,23,rep,name=claims,proto3" json:"claims,omitempty"`
	AllowedScopes                           []string              `protobuf:"bytes,24,rep,name=allowed_scopes,json=allowedScopes,proto3" json:"allowed_scopes,omitempty"`
	AllowedGrantTypes                       []string              `protobuf:"bytes,25,rep,name=allowed_grant_types,json=allowedGrantTypes,proto3" json:"allowed_grant_types,omitempty"`
	ClientSecrets                           []*ClientSecret       `protobuf:"bytes,26,rep,name=client_secrets,json=clientSecrets,proto3" json:"client_secrets,omitempty"`
	AllowedPermissions                      []string              `protobuf:"bytes,27,rep,name=allowed_permissions,json=allowedPermissions,proto3" json:"allowed_permissions,omitempty"`
	Metadata                                *types.StringMapValue `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`
	AllowedDynamicClaimTypes                []string              `protobuf:"bytes,29,rep,name=allowed_dynamic_claim_types,json=allowedDynamicClaimTypes,proto3" json:"allowed_dynamic_claim_types,omitempty"`
	AllowedTokenExchangeRequestedTokenTypes []string              `protobuf:"bytes,30,rep,name=allowed_token_exchange_requested_token_types,json=allowedTokenExchangeRequestedTokenTypes,proto3" json:"allowed_token_exchange_requested_token_types,omitempty"`
	AllowedRedirectUris                     []string              `protobuf:"bytes,31,rep,name=allowed_redirect_uris,json=allowedRedirectUris,proto3" json:"allowed_redirect_uris,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{6}
}

func (x *Client) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Client) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Client) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *Client) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Client) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Client) GetRequireRefreshClientSecret() bool {
	if x != nil {
		return x.RequireRefreshClientSecret
	}
	return false
}

func (x *Client) GetAllowOfflineAccess() bool {
	if x != nil {
		return x.AllowOfflineAccess
	}
	return false
}

func (x *Client) GetUpdateAccessTokenClaimsOnRefresh() bool {
	if x != nil {
		return x.UpdateAccessTokenClaimsOnRefresh
	}
	return false
}

func (x *Client) GetIncludeJwtId() bool {
	if x != nil {
		return x.IncludeJwtId
	}
	return false
}

func (x *Client) GetAlwaysSendClientClaims() bool {
	if x != nil {
		return x.AlwaysSendClientClaims
	}
	return false
}

func (x *Client) GetAlwaysIncludeUserClaimsInIdToken() bool {
	if x != nil {
		return x.AlwaysIncludeUserClaimsInIdToken
	}
	return false
}

func (x *Client) GetRequireClientSecret() bool {
	if x != nil {
		return x.RequireClientSecret
	}
	return false
}

func (x *Client) GetAccessTokenLifetime() uint64 {
	if x != nil {
		return x.AccessTokenLifetime
	}
	return 0
}

func (x *Client) GetAbsoluteRefreshTokenLifetime() uint64 {
	if x != nil {
		return x.AbsoluteRefreshTokenLifetime
	}
	return 0
}

func (x *Client) GetSlidingRefreshTokenLifetime() uint64 {
	if x != nil {
		return x.SlidingRefreshTokenLifetime
	}
	return 0
}

func (x *Client) GetIdentityTokenLifetime() uint64 {
	if x != nil {
		return x.IdentityTokenLifetime
	}
	return 0
}

func (x *Client) GetRefreshTokenGraceEnabled() bool {
	if x != nil {
		return x.RefreshTokenGraceEnabled
	}
	return false
}

func (x *Client) GetRefreshTokenGraceTtl() uint64 {
	if x != nil {
		return x.RefreshTokenGraceTtl
	}
	return 0
}

func (x *Client) GetRefreshTokenGraceMaxAttempts() uint64 {
	if x != nil {
		return x.RefreshTokenGraceMaxAttempts
	}
	return 0
}

func (x *Client) GetRefreshTokenUsage() uint64 {
	if x != nil {
		return x.RefreshTokenUsage
	}
	return 0
}

func (x *Client) GetRefreshTokenExpiration() uint64 {
	if x != nil {
		return x.RefreshTokenExpiration
	}
	return 0
}

func (x *Client) GetAccessTokenType() uint64 {
	if x != nil {
		return x.AccessTokenType
	}
	return 0
}

func (x *Client) GetClaims() []*Claim {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *Client) GetAllowedScopes() []string {
	if x != nil {
		return x.AllowedScopes
	}
	return nil
}

func (x *Client) GetAllowedGrantTypes() []string {
	if x != nil {
		return x.AllowedGrantTypes
	}
	return nil
}

func (x *Client) GetClientSecrets() []*ClientSecret {
	if x != nil {
		return x.ClientSecrets
	}
	return nil
}

func (x *Client) GetAllowedPermissions() []string {
	if x != nil {
		return x.AllowedPermissions
	}
	return nil
}

func (x *Client) GetMetadata() *types.StringMapValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Client) GetAllowedDynamicClaimTypes() []string {
	if x != nil {
		return x.AllowedDynamicClaimTypes
	}
	return nil
}

func (x *Client) GetAllowedTokenExchangeRequestedTokenTypes() []string {
	if x != nil {
		return x.AllowedTokenExchangeRequestedTokenTypes
	}
	return nil
}

func (x *Client) GetAllowedRedirectUris() []string {
	if x != nil {
		return x.AllowedRedirectUris
	}
	return nil
}

type Clients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*Client `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *Clients) Reset() {
	*x = Clients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clients) ProtoMessage() {}

func (x *Clients) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clients.ProtoReflect.Descriptor instead.
func (*Clients) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{7}
}

func (x *Clients) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

type ClientUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                                string                   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Enabled                                 *wrapperspb.BoolValue    `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientName                              *wrapperspb.StringValue  `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	Description                             *wrapperspb.StringValue  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Namespace                               *wrapperspb.StringValue  `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RequireRefreshClientSecret              *wrapperspb.BoolValue    `protobuf:"bytes,6,opt,name=require_refresh_client_secret,json=requireRefreshClientSecret,proto3" json:"require_refresh_client_secret,omitempty"`
	AllowOfflineAccess                      *wrapperspb.BoolValue    `protobuf:"bytes,7,opt,name=allow_offline_access,json=allowOfflineAccess,proto3" json:"allow_offline_access,omitempty"`
	UpdateAccessTokenClaimsOnRefresh        *wrapperspb.BoolValue    `protobuf:"bytes,8,opt,name=update_access_token_claims_on_refresh,json=updateAccessTokenClaimsOnRefresh,proto3" json:"update_access_token_claims_on_refresh,omitempty"`
	IncludeJwtId                            *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=include_jwt_id,json=includeJwtId,proto3" json:"include_jwt_id,omitempty"`
	AlwaysSendClientClaims                  *wrapperspb.BoolValue    `protobuf:"bytes,10,opt,name=always_send_client_claims,json=alwaysSendClientClaims,proto3" json:"always_send_client_claims,omitempty"`
	AlwaysIncludeUserClaimsInIdToken        *wrapperspb.BoolValue    `protobuf:"bytes,11,opt,name=always_include_user_claims_in_id_token,json=alwaysIncludeUserClaimsInIdToken,proto3" json:"always_include_user_claims_in_id_token,omitempty"`
	RequireClientSecret                     *wrapperspb.BoolValue    `protobuf:"bytes,12,opt,name=require_client_secret,json=requireClientSecret,proto3" json:"require_client_secret,omitempty"`
	AccessTokenLifetime                     *wrapperspb.UInt64Value  `protobuf:"bytes,13,opt,name=access_token_lifetime,json=accessTokenLifetime,proto3" json:"access_token_lifetime,omitempty"`
	AbsoluteRefreshTokenLifetime            *wrapperspb.UInt64Value  `protobuf:"bytes,14,opt,name=absolute_refresh_token_lifetime,json=absoluteRefreshTokenLifetime,proto3" json:"absolute_refresh_token_lifetime,omitempty"`
	SlidingRefreshTokenLifetime             *wrapperspb.UInt64Value  `protobuf:"bytes,15,opt,name=sliding_refresh_token_lifetime,json=slidingRefreshTokenLifetime,proto3" json:"sliding_refresh_token_lifetime,omitempty"`
	IdentityTokenLifetime                   *wrapperspb.UInt64Value  `protobuf:"bytes,16,opt,name=identity_token_lifetime,json=identityTokenLifetime,proto3" json:"identity_token_lifetime,omitempty"`
	RefreshTokenGraceEnabled                *wrapperspb.BoolValue    `protobuf:"bytes,17,opt,name=refresh_token_grace_enabled,json=refreshTokenGraceEnabled,proto3" json:"refresh_token_grace_enabled,omitempty"`
	RefreshTokenGraceTtl                    *wrapperspb.UInt64Value  `protobuf:"bytes,18,opt,name=refresh_token_grace_ttl,json=refreshTokenGraceTtl,proto3" json:"refresh_token_grace_ttl,omitempty"`
	RefreshTokenGraceMaxAttempts            *wrapperspb.UInt64Value  `protobuf:"bytes,19,opt,name=refresh_token_grace_max_attempts,json=refreshTokenGraceMaxAttempts,proto3" json:"refresh_token_grace_max_attempts,omitempty"`
	RefreshTokenUsage                       *wrapperspb.UInt64Value  `protobuf:"bytes,20,opt,name=refresh_token_usage,json=refreshTokenUsage,proto3" json:"refresh_token_usage,omitempty"`
	RefreshTokenExpiration                  *wrapperspb.UInt64Value  `protobuf:"bytes,21,opt,name=refresh_token_expiration,json=refreshTokenExpiration,proto3" json:"refresh_token_expiration,omitempty"`
	AccessTokenType                         *wrapperspb.UInt64Value  `protobuf:"bytes,22,opt,name=access_token_type,json=accessTokenType,proto3" json:"access_token_type,omitempty"`
	Claims                                  *ClaimsUpdate            `protobuf:"bytes,23,opt,name=claims,proto3" json:"claims,omitempty"`
	AllowedScopes                           *types.StringArrayUpdate `protobuf:"bytes,24,opt,name=allowed_scopes,json=allowedScopes,proto3" json:"allowed_scopes,omitempty"`
	AllowedGrantTypes                       *types.StringArrayUpdate `protobuf:"bytes,25,opt,name=allowed_grant_types,json=allowedGrantTypes,proto3" json:"allowed_grant_types,omitempty"`
	ClientSecrets                           *ClientSecretsUpdate     `protobuf:"bytes,26,opt,name=client_secrets,json=clientSecrets,proto3" json:"client_secrets,omitempty"`
	AllowedPermissions                      *types.StringArrayUpdate `protobuf:"bytes,27,opt,name=allowed_permissions,json=allowedPermissions,proto3" json:"allowed_permissions,omitempty"`
	Metadata                                *types.StringMapUpdate   `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`
	AllowedDynamicClaimTypes                *types.StringArrayUpdate `protobuf:"bytes,29,opt,name=allowed_dynamic_claim_types,json=allowedDynamicClaimTypes,proto3" json:"allowed_dynamic_claim_types,omitempty"`
	AllowedTokenExchangeRequestedTokenTypes *types.StringArrayUpdate `protobuf:"bytes,30,opt,name=allowed_token_exchange_requested_token_types,json=allowedTokenExchangeRequestedTokenTypes,proto3" json:"allowed_token_exchange_requested_token_types,omitempty"`
	AllowedRedirectUris                     *types.StringArrayUpdate `protobuf:"bytes,31,opt,name=allowed_redirect_uris,json=allowedRedirectUris,proto3" json:"allowed_redirect_uris,omitempty"`
}

func (x *ClientUpdate) Reset() {
	*x = ClientUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdate) ProtoMessage() {}

func (x *ClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdate.ProtoReflect.Descriptor instead.
func (*ClientUpdate) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{8}
}

func (x *ClientUpdate) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUpdate) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *ClientUpdate) GetClientName() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientName
	}
	return nil
}

func (x *ClientUpdate) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ClientUpdate) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ClientUpdate) GetRequireRefreshClientSecret() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequireRefreshClientSecret
	}
	return nil
}

func (x *ClientUpdate) GetAllowOfflineAccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowOfflineAccess
	}
	return nil
}

func (x *ClientUpdate) GetUpdateAccessTokenClaimsOnRefresh() *wrapperspb.BoolValue {
	if x != nil {
		return x.UpdateAccessTokenClaimsOnRefresh
	}
	return nil
}

func (x *ClientUpdate) GetIncludeJwtId() *wrapperspb.BoolValue {
	if x != nil {
		return x.IncludeJwtId
	}
	return nil
}

func (x *ClientUpdate) GetAlwaysSendClientClaims() *wrapperspb.BoolValue {
	if x != nil {
		return x.AlwaysSendClientClaims
	}
	return nil
}

func (x *ClientUpdate) GetAlwaysIncludeUserClaimsInIdToken() *wrapperspb.BoolValue {
	if x != nil {
		return x.AlwaysIncludeUserClaimsInIdToken
	}
	return nil
}

func (x *ClientUpdate) GetRequireClientSecret() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequireClientSecret
	}
	return nil
}

func (x *ClientUpdate) GetAccessTokenLifetime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AccessTokenLifetime
	}
	return nil
}

func (x *ClientUpdate) GetAbsoluteRefreshTokenLifetime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AbsoluteRefreshTokenLifetime
	}
	return nil
}

func (x *ClientUpdate) GetSlidingRefreshTokenLifetime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SlidingRefreshTokenLifetime
	}
	return nil
}

func (x *ClientUpdate) GetIdentityTokenLifetime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.IdentityTokenLifetime
	}
	return nil
}

func (x *ClientUpdate) GetRefreshTokenGraceEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.RefreshTokenGraceEnabled
	}
	return nil
}

func (x *ClientUpdate) GetRefreshTokenGraceTtl() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RefreshTokenGraceTtl
	}
	return nil
}

func (x *ClientUpdate) GetRefreshTokenGraceMaxAttempts() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RefreshTokenGraceMaxAttempts
	}
	return nil
}

func (x *ClientUpdate) GetRefreshTokenUsage() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RefreshTokenUsage
	}
	return nil
}

func (x *ClientUpdate) GetRefreshTokenExpiration() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RefreshTokenExpiration
	}
	return nil
}

func (x *ClientUpdate) GetAccessTokenType() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AccessTokenType
	}
	return nil
}

func (x *ClientUpdate) GetClaims() *ClaimsUpdate {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *ClientUpdate) GetAllowedScopes() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedScopes
	}
	return nil
}

func (x *ClientUpdate) GetAllowedGrantTypes() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedGrantTypes
	}
	return nil
}

func (x *ClientUpdate) GetClientSecrets() *ClientSecretsUpdate {
	if x != nil {
		return x.ClientSecrets
	}
	return nil
}

func (x *ClientUpdate) GetAllowedPermissions() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedPermissions
	}
	return nil
}

func (x *ClientUpdate) GetMetadata() *types.StringMapUpdate {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClientUpdate) GetAllowedDynamicClaimTypes() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedDynamicClaimTypes
	}
	return nil
}

func (x *ClientUpdate) GetAllowedTokenExchangeRequestedTokenTypes() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedTokenExchangeRequestedTokenTypes
	}
	return nil
}

func (x *ClientUpdate) GetAllowedRedirectUris() *types.StringArrayUpdate {
	if x != nil {
		return x.AllowedRedirectUris
	}
	return nil
}

type ClaimsUpdate_Granular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add       []*Claim `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	Remove    []*Claim `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
	RemoveAll []string `protobuf:"bytes,3,rep,name=remove_all,json=removeAll,proto3" json:"remove_all,omitempty"`
}

func (x *ClaimsUpdate_Granular) Reset() {
	*x = ClaimsUpdate_Granular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsUpdate_Granular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsUpdate_Granular) ProtoMessage() {}

func (x *ClaimsUpdate_Granular) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimsUpdate_Granular.ProtoReflect.Descriptor instead.
func (*ClaimsUpdate_Granular) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ClaimsUpdate_Granular) GetAdd() []*Claim {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *ClaimsUpdate_Granular) GetRemove() []*Claim {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *ClaimsUpdate_Granular) GetRemoveAll() []string {
	if x != nil {
		return x.RemoveAll
	}
	return nil
}

type ClientSecretsUpdate_ByIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ClientSecretsUpdate_ByIds) Reset() {
	*x = ClientSecretsUpdate_ByIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_oidc_models_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSecretsUpdate_ByIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSecretsUpdate_ByIds) ProtoMessage() {}

func (x *ClientSecretsUpdate_ByIds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_oidc_models_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSecretsUpdate_ByIds.ProtoReflect.Descriptor instead.
func (*ClientSecretsUpdate_ByIds) Descriptor() ([]byte, []int) {
	return file_proto_oidc_models_client_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ClientSecretsUpdate_ByIds) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_proto_oidc_models_client_proto protoreflect.FileDescriptor

var file_proto_oidc_models_client_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa6, 0x02, 0x0a,
	0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x08, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f,
	0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x1a, 0x87, 0x01, 0x0a, 0x08, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x6f, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7b, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x1a, 0x19, 0x0a, 0x05, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x0d, 0x0a, 0x06, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x4f, 0x0a, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6a, 0x77, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4a, 0x77, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x12, 0x50, 0x0a, 0x26, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x49, 0x6e, 0x49, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f,
	0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x73, 0x6c, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x54, 0x74, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72,
	0x61, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64,
	0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69,
	0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d,
	0x0a, 0x2c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x27, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x73, 0x22, 0x3e, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xdf, 0x13, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x4c, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a,
	0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x4f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6a, 0x77, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4a, 0x77, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x19,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x12, 0x6c, 0x0a, 0x26, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x49, 0x6e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x1e, 0x73, 0x6c, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b,
	0x73, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x17,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x54, 0x74,
	0x6c, 0x12, 0x64, 0x0a, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x12, 0x45, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x5d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x7d, 0x0a, 0x2c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x27, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x69, 0x73, 0x42, 0x91, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x66,
	0x66, 0x79, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x2e, 0x72, 0x61, 0x67, 0x65, 0x6f, 0x69, 0x64, 0x63,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x66, 0x66, 0x79, 0x2d, 0x62, 0x75, 0x6e,
	0x6e, 0x79, 0x2f, 0x66, 0x6c, 0x75, 0x66, 0x66, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61,
	0x67, 0x65, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0xaa, 0x02, 0x20, 0x46, 0x6c, 0x75, 0x66, 0x66, 0x79, 0x42, 0x75, 0x6e,
	0x6e, 0x79, 0x2e, 0x52, 0x61, 0x67, 0x65, 0x4f, 0x69, 0x64, 0x63, 0x2e, 0x4f, 0x69, 0x64, 0x63,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_oidc_models_client_proto_rawDescOnce sync.Once
	file_proto_oidc_models_client_proto_rawDescData = file_proto_oidc_models_client_proto_rawDesc
)

func file_proto_oidc_models_client_proto_rawDescGZIP() []byte {
	file_proto_oidc_models_client_proto_rawDescOnce.Do(func() {
		file_proto_oidc_models_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_oidc_models_client_proto_rawDescData)
	})
	return file_proto_oidc_models_client_proto_rawDescData
}

var file_proto_oidc_models_client_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_oidc_models_client_proto_goTypes = []any{
	(*Claim)(nil),                     // 0: proto.oidc.models.Claim
	(*ClaimsValue)(nil),               // 1: proto.oidc.models.ClaimsValue
	(*ClaimsUpdate)(nil),              // 2: proto.oidc.models.ClaimsUpdate
	(*ClientSecret)(nil),              // 3: proto.oidc.models.ClientSecret
	(*ClientSecretResponse)(nil),      // 4: proto.oidc.models.ClientSecretResponse
	(*ClientSecretsUpdate)(nil),       // 5: proto.oidc.models.ClientSecretsUpdate
	(*Client)(nil),                    // 6: proto.oidc.models.Client
	(*Clients)(nil),                   // 7: proto.oidc.models.Clients
	(*ClientUpdate)(nil),              // 8: proto.oidc.models.ClientUpdate
	(*ClaimsUpdate_Granular)(nil),     // 9: proto.oidc.models.ClaimsUpdate.Granular
	(*ClientSecretsUpdate_ByIds)(nil), // 10: proto.oidc.models.ClientSecretsUpdate.ByIds
	(*types.StringValues)(nil),        // 11: proto.types.StringValues
	(*types.Int64Values)(nil),         // 12: proto.types.Int64Values
	(*types.DoubleValues)(nil),        // 13: proto.types.DoubleValues
	(*wrapperspb.BoolValue)(nil),      // 14: google.protobuf.BoolValue
	(*types.StringMapValue)(nil),      // 15: proto.types.StringMapValue
	(*wrapperspb.StringValue)(nil),    // 16: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil),    // 17: google.protobuf.UInt64Value
	(*types.StringArrayUpdate)(nil),   // 18: proto.types.StringArrayUpdate
	(*types.StringMapUpdate)(nil),     // 19: proto.types.StringMapUpdate
}
var file_proto_oidc_models_client_proto_depIdxs = []int32{
	11, // 0: proto.oidc.models.Claim.string_values:type_name -> proto.types.StringValues
	12, // 1: proto.oidc.models.Claim.int64_values:type_name -> proto.types.Int64Values
	13, // 2: proto.oidc.models.Claim.double_values:type_name -> proto.types.DoubleValues
	0,  // 3: proto.oidc.models.ClaimsValue.values:type_name -> proto.oidc.models.Claim
	9,  // 4: proto.oidc.models.ClaimsUpdate.granular:type_name -> proto.oidc.models.ClaimsUpdate.Granular
	1,  // 5: proto.oidc.models.ClaimsUpdate.replace:type_name -> proto.oidc.models.ClaimsValue
	10, // 6: proto.oidc.models.ClientSecretsUpdate.remove_by_ids:type_name -> proto.oidc.models.ClientSecretsUpdate.ByIds
	14, // 7: proto.oidc.models.ClientSecretsUpdate.remove_all:type_name -> google.protobuf.BoolValue
	0,  // 8: proto.oidc.models.Client.claims:type_name -> proto.oidc.models.Claim
	3,  // 9: proto.oidc.models.Client.client_secrets:type_name -> proto.oidc.models.ClientSecret
	15, // 10: proto.oidc.models.Client.metadata:type_name -> proto.types.StringMapValue
	6,  // 11: proto.oidc.models.Clients.clients:type_name -> proto.oidc.models.Client
	14, // 12: proto.oidc.models.ClientUpdate.enabled:type_name -> google.protobuf.BoolValue
	16, // 13: proto.oidc.models.ClientUpdate.client_name:type_name -> google.protobuf.StringValue
	16, // 14: proto.oidc.models.ClientUpdate.description:type_name -> google.protobuf.StringValue
	16, // 15: proto.oidc.models.ClientUpdate.namespace:type_name -> google.protobuf.StringValue
	14, // 16: proto.oidc.models.ClientUpdate.require_refresh_client_secret:type_name -> google.protobuf.BoolValue
	14, // 17: proto.oidc.models.ClientUpdate.allow_offline_access:type_name -> google.protobuf.BoolValue
	14, // 18: proto.oidc.models.ClientUpdate.update_access_token_claims_on_refresh:type_name -> google.protobuf.BoolValue
	14, // 19: proto.oidc.models.ClientUpdate.include_jwt_id:type_name -> google.protobuf.BoolValue
	14, // 20: proto.oidc.models.ClientUpdate.always_send_client_claims:type_name -> google.protobuf.BoolValue
	14, // 21: proto.oidc.models.ClientUpdate.always_include_user_claims_in_id_token:type_name -> google.protobuf.BoolValue
	14, // 22: proto.oidc.models.ClientUpdate.require_client_secret:type_name -> google.protobuf.BoolValue
	17, // 23: proto.oidc.models.ClientUpdate.access_token_lifetime:type_name -> google.protobuf.UInt64Value
	17, // 24: proto.oidc.models.ClientUpdate.absolute_refresh_token_lifetime:type_name -> google.protobuf.UInt64Value
	17, // 25: proto.oidc.models.ClientUpdate.sliding_refresh_token_lifetime:type_name -> google.protobuf.UInt64Value
	17, // 26: proto.oidc.models.ClientUpdate.identity_token_lifetime:type_name -> google.protobuf.UInt64Value
	14, // 27: proto.oidc.models.ClientUpdate.refresh_token_grace_enabled:type_name -> google.protobuf.BoolValue
	17, // 28: proto.oidc.models.ClientUpdate.refresh_token_grace_ttl:type_name -> google.protobuf.UInt64Value
	17, // 29: proto.oidc.models.ClientUpdate.refresh_token_grace_max_attempts:type_name -> google.protobuf.UInt64Value
	17, // 30: proto.oidc.models.ClientUpdate.refresh_token_usage:type_name -> google.protobuf.UInt64Value
	17, // 31: proto.oidc.models.ClientUpdate.refresh_token_expiration:type_name -> google.protobuf.UInt64Value
	17, // 32: proto.oidc.models.ClientUpdate.access_token_type:type_name -> google.protobuf.UInt64Value
	2,  // 33: proto.oidc.models.ClientUpdate.claims:type_name -> proto.oidc.models.ClaimsUpdate
	18, // 34: proto.oidc.models.ClientUpdate.allowed_scopes:type_name -> proto.types.StringArrayUpdate
	18, // 35: proto.oidc.models.ClientUpdate.allowed_grant_types:type_name -> proto.types.StringArrayUpdate
	5,  // 36: proto.oidc.models.ClientUpdate.client_secrets:type_name -> proto.oidc.models.ClientSecretsUpdate
	18, // 37: proto.oidc.models.ClientUpdate.allowed_permissions:type_name -> proto.types.StringArrayUpdate
	19, // 38: proto.oidc.models.ClientUpdate.metadata:type_name -> proto.types.StringMapUpdate
	18, // 39: proto.oidc.models.ClientUpdate.allowed_dynamic_claim_types:type_name -> proto.types.StringArrayUpdate
	18, // 40: proto.oidc.models.ClientUpdate.allowed_token_exchange_requested_token_types:type_name -> proto.types.StringArrayUpdate
	18, // 41: proto.oidc.models.ClientUpdate.allowed_redirect_uris:type_name -> proto.types.StringArrayUpdate
	0,  // 42: proto.oidc.models.ClaimsUpdate.Granular.add:type_name -> proto.oidc.models.Claim
	0,  // 43: proto.oidc.models.ClaimsUpdate.Granular.remove:type_name -> proto.oidc.models.Claim
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_proto_oidc_models_client_proto_init() }
func file_proto_oidc_models_client_proto_init() {
	if File_proto_oidc_models_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_oidc_models_client_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ClientSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ClientSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ClientSecretsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Clients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ClientUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimsUpdate_Granular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_oidc_models_client_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ClientSecretsUpdate_ByIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_oidc_models_client_proto_msgTypes[0].OneofWrappers = []any{
		(*Claim_StringValue)(nil),
		(*Claim_BoolValue)(nil),
		(*Claim_Int64Value)(nil),
		(*Claim_DoubleValue)(nil),
		(*Claim_StringValues)(nil),
		(*Claim_Int64Values)(nil),
		(*Claim_DoubleValues)(nil),
	}
	file_proto_oidc_models_client_proto_msgTypes[2].OneofWrappers = []any{
		(*ClaimsUpdate_Granular_)(nil),
		(*ClaimsUpdate_Replace)(nil),
	}
	file_proto_oidc_models_client_proto_msgTypes[5].OneofWrappers = []any{
		(*ClientSecretsUpdate_RemoveByIds)(nil),
		(*ClientSecretsUpdate_RemoveAll)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_oidc_models_client_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_oidc_models_client_proto_goTypes,
		DependencyIndexes: file_proto_oidc_models_client_proto_depIdxs,
		MessageInfos:      file_proto_oidc_models_client_proto_msgTypes,
	}.Build()
	File_proto_oidc_models_client_proto = out.File
	file_proto_oidc_models_client_proto_rawDesc = nil
	file_proto_oidc_models_client_proto_goTypes = nil
	file_proto_oidc_models_client_proto_depIdxs = nil
}
