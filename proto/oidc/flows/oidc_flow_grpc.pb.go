// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/oidc/flows/oidc_flow.proto

package flows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorizationRequestStateStore_StoreAuthorizationRequestState_FullMethodName  = "/proto.oidc.flows.AuthorizationRequestStateStore/StoreAuthorizationRequestState"
	AuthorizationRequestStateStore_GetAuthorizationRequestState_FullMethodName    = "/proto.oidc.flows.AuthorizationRequestStateStore/GetAuthorizationRequestState"
	AuthorizationRequestStateStore_DeleteAuthorizationRequestState_FullMethodName = "/proto.oidc.flows.AuthorizationRequestStateStore/DeleteAuthorizationRequestState"
)

// AuthorizationRequestStateStoreClient is the client API for AuthorizationRequestStateStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationRequestStateStoreClient interface {
	// Create user
	StoreAuthorizationRequestState(ctx context.Context, in *StoreAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*StoreAuthorizationRequestStateResponse, error)
	GetAuthorizationRequestState(ctx context.Context, in *GetAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*GetAuthorizationRequestStateResponse, error)
	DeleteAuthorizationRequestState(ctx context.Context, in *DeleteAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*DeleteAuthorizationRequestStateResponse, error)
}

type authorizationRequestStateStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationRequestStateStoreClient(cc grpc.ClientConnInterface) AuthorizationRequestStateStoreClient {
	return &authorizationRequestStateStoreClient{cc}
}

func (c *authorizationRequestStateStoreClient) StoreAuthorizationRequestState(ctx context.Context, in *StoreAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*StoreAuthorizationRequestStateResponse, error) {
	out := new(StoreAuthorizationRequestStateResponse)
	err := c.cc.Invoke(ctx, AuthorizationRequestStateStore_StoreAuthorizationRequestState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationRequestStateStoreClient) GetAuthorizationRequestState(ctx context.Context, in *GetAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*GetAuthorizationRequestStateResponse, error) {
	out := new(GetAuthorizationRequestStateResponse)
	err := c.cc.Invoke(ctx, AuthorizationRequestStateStore_GetAuthorizationRequestState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationRequestStateStoreClient) DeleteAuthorizationRequestState(ctx context.Context, in *DeleteAuthorizationRequestStateRequest, opts ...grpc.CallOption) (*DeleteAuthorizationRequestStateResponse, error) {
	out := new(DeleteAuthorizationRequestStateResponse)
	err := c.cc.Invoke(ctx, AuthorizationRequestStateStore_DeleteAuthorizationRequestState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationRequestStateStoreServer is the server API for AuthorizationRequestStateStore service.
// All implementations must embed UnimplementedAuthorizationRequestStateStoreServer
// for forward compatibility
type AuthorizationRequestStateStoreServer interface {
	// Create user
	StoreAuthorizationRequestState(context.Context, *StoreAuthorizationRequestStateRequest) (*StoreAuthorizationRequestStateResponse, error)
	GetAuthorizationRequestState(context.Context, *GetAuthorizationRequestStateRequest) (*GetAuthorizationRequestStateResponse, error)
	DeleteAuthorizationRequestState(context.Context, *DeleteAuthorizationRequestStateRequest) (*DeleteAuthorizationRequestStateResponse, error)
	mustEmbedUnimplementedAuthorizationRequestStateStoreServer()
}

// UnimplementedAuthorizationRequestStateStoreServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationRequestStateStoreServer struct {
}

func (UnimplementedAuthorizationRequestStateStoreServer) StoreAuthorizationRequestState(context.Context, *StoreAuthorizationRequestStateRequest) (*StoreAuthorizationRequestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAuthorizationRequestState not implemented")
}
func (UnimplementedAuthorizationRequestStateStoreServer) GetAuthorizationRequestState(context.Context, *GetAuthorizationRequestStateRequest) (*GetAuthorizationRequestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationRequestState not implemented")
}
func (UnimplementedAuthorizationRequestStateStoreServer) DeleteAuthorizationRequestState(context.Context, *DeleteAuthorizationRequestStateRequest) (*DeleteAuthorizationRequestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorizationRequestState not implemented")
}
func (UnimplementedAuthorizationRequestStateStoreServer) mustEmbedUnimplementedAuthorizationRequestStateStoreServer() {
}

// UnsafeAuthorizationRequestStateStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationRequestStateStoreServer will
// result in compilation errors.
type UnsafeAuthorizationRequestStateStoreServer interface {
	mustEmbedUnimplementedAuthorizationRequestStateStoreServer()
}

func RegisterAuthorizationRequestStateStoreServer(s grpc.ServiceRegistrar, srv AuthorizationRequestStateStoreServer) {
	s.RegisterService(&AuthorizationRequestStateStore_ServiceDesc, srv)
}

func _AuthorizationRequestStateStore_StoreAuthorizationRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAuthorizationRequestStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationRequestStateStoreServer).StoreAuthorizationRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationRequestStateStore_StoreAuthorizationRequestState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationRequestStateStoreServer).StoreAuthorizationRequestState(ctx, req.(*StoreAuthorizationRequestStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationRequestStateStore_GetAuthorizationRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationRequestStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationRequestStateStoreServer).GetAuthorizationRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationRequestStateStore_GetAuthorizationRequestState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationRequestStateStoreServer).GetAuthorizationRequestState(ctx, req.(*GetAuthorizationRequestStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationRequestStateStore_DeleteAuthorizationRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorizationRequestStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationRequestStateStoreServer).DeleteAuthorizationRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationRequestStateStore_DeleteAuthorizationRequestState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationRequestStateStoreServer).DeleteAuthorizationRequestState(ctx, req.(*DeleteAuthorizationRequestStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationRequestStateStore_ServiceDesc is the grpc.ServiceDesc for AuthorizationRequestStateStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationRequestStateStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.oidc.flows.AuthorizationRequestStateStore",
	HandlerType: (*AuthorizationRequestStateStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreAuthorizationRequestState",
			Handler:    _AuthorizationRequestStateStore_StoreAuthorizationRequestState_Handler,
		},
		{
			MethodName: "GetAuthorizationRequestState",
			Handler:    _AuthorizationRequestStateStore_GetAuthorizationRequestState_Handler,
		},
		{
			MethodName: "DeleteAuthorizationRequestState",
			Handler:    _AuthorizationRequestStateStore_DeleteAuthorizationRequestState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oidc/flows/oidc_flow.proto",
}

const (
	ExternalOauth2FlowStore_StoreExternalOauth2Final_FullMethodName  = "/proto.oidc.flows.ExternalOauth2FlowStore/StoreExternalOauth2Final"
	ExternalOauth2FlowStore_GetExternalOauth2Final_FullMethodName    = "/proto.oidc.flows.ExternalOauth2FlowStore/GetExternalOauth2Final"
	ExternalOauth2FlowStore_DeleteExternalOauth2Final_FullMethodName = "/proto.oidc.flows.ExternalOauth2FlowStore/DeleteExternalOauth2Final"
)

// ExternalOauth2FlowStoreClient is the client API for ExternalOauth2FlowStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalOauth2FlowStoreClient interface {
	// Create user
	StoreExternalOauth2Final(ctx context.Context, in *StoreExternalOauth2FinalRequest, opts ...grpc.CallOption) (*StoreExternalOauth2FinalResponse, error)
	GetExternalOauth2Final(ctx context.Context, in *GetExternalOauth2FinalRequest, opts ...grpc.CallOption) (*GetExternalOauth2FinalResponse, error)
	DeleteExternalOauth2Final(ctx context.Context, in *DeleteExternalOauth2FinalRequest, opts ...grpc.CallOption) (*DeleteExternalOauth2FinalResponse, error)
}

type externalOauth2FlowStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalOauth2FlowStoreClient(cc grpc.ClientConnInterface) ExternalOauth2FlowStoreClient {
	return &externalOauth2FlowStoreClient{cc}
}

func (c *externalOauth2FlowStoreClient) StoreExternalOauth2Final(ctx context.Context, in *StoreExternalOauth2FinalRequest, opts ...grpc.CallOption) (*StoreExternalOauth2FinalResponse, error) {
	out := new(StoreExternalOauth2FinalResponse)
	err := c.cc.Invoke(ctx, ExternalOauth2FlowStore_StoreExternalOauth2Final_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalOauth2FlowStoreClient) GetExternalOauth2Final(ctx context.Context, in *GetExternalOauth2FinalRequest, opts ...grpc.CallOption) (*GetExternalOauth2FinalResponse, error) {
	out := new(GetExternalOauth2FinalResponse)
	err := c.cc.Invoke(ctx, ExternalOauth2FlowStore_GetExternalOauth2Final_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalOauth2FlowStoreClient) DeleteExternalOauth2Final(ctx context.Context, in *DeleteExternalOauth2FinalRequest, opts ...grpc.CallOption) (*DeleteExternalOauth2FinalResponse, error) {
	out := new(DeleteExternalOauth2FinalResponse)
	err := c.cc.Invoke(ctx, ExternalOauth2FlowStore_DeleteExternalOauth2Final_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalOauth2FlowStoreServer is the server API for ExternalOauth2FlowStore service.
// All implementations must embed UnimplementedExternalOauth2FlowStoreServer
// for forward compatibility
type ExternalOauth2FlowStoreServer interface {
	// Create user
	StoreExternalOauth2Final(context.Context, *StoreExternalOauth2FinalRequest) (*StoreExternalOauth2FinalResponse, error)
	GetExternalOauth2Final(context.Context, *GetExternalOauth2FinalRequest) (*GetExternalOauth2FinalResponse, error)
	DeleteExternalOauth2Final(context.Context, *DeleteExternalOauth2FinalRequest) (*DeleteExternalOauth2FinalResponse, error)
	mustEmbedUnimplementedExternalOauth2FlowStoreServer()
}

// UnimplementedExternalOauth2FlowStoreServer must be embedded to have forward compatible implementations.
type UnimplementedExternalOauth2FlowStoreServer struct {
}

func (UnimplementedExternalOauth2FlowStoreServer) StoreExternalOauth2Final(context.Context, *StoreExternalOauth2FinalRequest) (*StoreExternalOauth2FinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreExternalOauth2Final not implemented")
}
func (UnimplementedExternalOauth2FlowStoreServer) GetExternalOauth2Final(context.Context, *GetExternalOauth2FinalRequest) (*GetExternalOauth2FinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalOauth2Final not implemented")
}
func (UnimplementedExternalOauth2FlowStoreServer) DeleteExternalOauth2Final(context.Context, *DeleteExternalOauth2FinalRequest) (*DeleteExternalOauth2FinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalOauth2Final not implemented")
}
func (UnimplementedExternalOauth2FlowStoreServer) mustEmbedUnimplementedExternalOauth2FlowStoreServer() {
}

// UnsafeExternalOauth2FlowStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalOauth2FlowStoreServer will
// result in compilation errors.
type UnsafeExternalOauth2FlowStoreServer interface {
	mustEmbedUnimplementedExternalOauth2FlowStoreServer()
}

func RegisterExternalOauth2FlowStoreServer(s grpc.ServiceRegistrar, srv ExternalOauth2FlowStoreServer) {
	s.RegisterService(&ExternalOauth2FlowStore_ServiceDesc, srv)
}

func _ExternalOauth2FlowStore_StoreExternalOauth2Final_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreExternalOauth2FinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalOauth2FlowStoreServer).StoreExternalOauth2Final(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalOauth2FlowStore_StoreExternalOauth2Final_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalOauth2FlowStoreServer).StoreExternalOauth2Final(ctx, req.(*StoreExternalOauth2FinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalOauth2FlowStore_GetExternalOauth2Final_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalOauth2FinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalOauth2FlowStoreServer).GetExternalOauth2Final(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalOauth2FlowStore_GetExternalOauth2Final_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalOauth2FlowStoreServer).GetExternalOauth2Final(ctx, req.(*GetExternalOauth2FinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalOauth2FlowStore_DeleteExternalOauth2Final_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalOauth2FinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalOauth2FlowStoreServer).DeleteExternalOauth2Final(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalOauth2FlowStore_DeleteExternalOauth2Final_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalOauth2FlowStoreServer).DeleteExternalOauth2Final(ctx, req.(*DeleteExternalOauth2FinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalOauth2FlowStore_ServiceDesc is the grpc.ServiceDesc for ExternalOauth2FlowStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalOauth2FlowStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.oidc.flows.ExternalOauth2FlowStore",
	HandlerType: (*ExternalOauth2FlowStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreExternalOauth2Final",
			Handler:    _ExternalOauth2FlowStore_StoreExternalOauth2Final_Handler,
		},
		{
			MethodName: "GetExternalOauth2Final",
			Handler:    _ExternalOauth2FlowStore_GetExternalOauth2Final_Handler,
		},
		{
			MethodName: "DeleteExternalOauth2Final",
			Handler:    _ExternalOauth2FlowStore_DeleteExternalOauth2Final_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oidc/flows/oidc_flow.proto",
}
