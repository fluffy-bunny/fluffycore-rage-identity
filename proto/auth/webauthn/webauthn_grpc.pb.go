// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/auth/webauthn/webauthn.proto

package webauthn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebAuthNService_GetCredentialCreateOptions_FullMethodName = "/proto.oidc.idp.WebAuthNService/GetCredentialCreateOptions"
)

// WebAuthNServiceClient is the client API for WebAuthNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebAuthNServiceClient interface {
	// Create idp
	GetCredentialCreateOptions(ctx context.Context, in *GetCredentialCreateOptionsRequest, opts ...grpc.CallOption) (*GetCredentialCreateOptionsResponse, error)
}

type webAuthNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAuthNServiceClient(cc grpc.ClientConnInterface) WebAuthNServiceClient {
	return &webAuthNServiceClient{cc}
}

func (c *webAuthNServiceClient) GetCredentialCreateOptions(ctx context.Context, in *GetCredentialCreateOptionsRequest, opts ...grpc.CallOption) (*GetCredentialCreateOptionsResponse, error) {
	out := new(GetCredentialCreateOptionsResponse)
	err := c.cc.Invoke(ctx, WebAuthNService_GetCredentialCreateOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAuthNServiceServer is the server API for WebAuthNService service.
// All implementations must embed UnimplementedWebAuthNServiceServer
// for forward compatibility
type WebAuthNServiceServer interface {
	// Create idp
	GetCredentialCreateOptions(context.Context, *GetCredentialCreateOptionsRequest) (*GetCredentialCreateOptionsResponse, error)
	mustEmbedUnimplementedWebAuthNServiceServer()
}

// UnimplementedWebAuthNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebAuthNServiceServer struct {
}

func (UnimplementedWebAuthNServiceServer) GetCredentialCreateOptions(context.Context, *GetCredentialCreateOptionsRequest) (*GetCredentialCreateOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialCreateOptions not implemented")
}
func (UnimplementedWebAuthNServiceServer) mustEmbedUnimplementedWebAuthNServiceServer() {}

// UnsafeWebAuthNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebAuthNServiceServer will
// result in compilation errors.
type UnsafeWebAuthNServiceServer interface {
	mustEmbedUnimplementedWebAuthNServiceServer()
}

func RegisterWebAuthNServiceServer(s grpc.ServiceRegistrar, srv WebAuthNServiceServer) {
	s.RegisterService(&WebAuthNService_ServiceDesc, srv)
}

func _WebAuthNService_GetCredentialCreateOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialCreateOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAuthNServiceServer).GetCredentialCreateOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebAuthNService_GetCredentialCreateOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAuthNServiceServer).GetCredentialCreateOptions(ctx, req.(*GetCredentialCreateOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebAuthNService_ServiceDesc is the grpc.ServiceDesc for WebAuthNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebAuthNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.oidc.idp.WebAuthNService",
	HandlerType: (*WebAuthNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredentialCreateOptions",
			Handler:    _WebAuthNService_GetCredentialCreateOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/webauthn/webauthn.proto",
}
