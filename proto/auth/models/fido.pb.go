// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// The messages in this file comprise the messages to communicate to FIDO
// security keys. This file translates
// <chrome/src>/third_party/blink/public/mojom/webauthn/authenticator.mojom
// to protobuf.
// The protobuf requests are translated to /device/fido requests in the key
// challenge service in Chrome.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: proto/auth/models/fido.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Fido authenticator status.
type AuthenticatorStatus int32

const (
	AuthenticatorStatus_SUCCESS             AuthenticatorStatus = 0
	AuthenticatorStatus_PENDING_REQUEST     AuthenticatorStatus = 1
	AuthenticatorStatus_NOT_ALLOWED_ERROR   AuthenticatorStatus = 2
	AuthenticatorStatus_INVALID_DOMAIN      AuthenticatorStatus = 3
	AuthenticatorStatus_INVALID_ICON_URL    AuthenticatorStatus = 4
	AuthenticatorStatus_CREDENTIAL_EXCLUDED AuthenticatorStatus = 5
	// TODO(crbug/964439): Unused in Desktop, but kept around for Android. Delete
	// once it's fully obsolete.
	AuthenticatorStatus_CREDENTIAL_NOT_RECOGNIZED        AuthenticatorStatus = 6
	AuthenticatorStatus_NOT_IMPLEMENTED                  AuthenticatorStatus = 7
	AuthenticatorStatus_NOT_FOCUSED                      AuthenticatorStatus = 8
	AuthenticatorStatus_RESIDENT_CREDENTIALS_UNSUPPORTED AuthenticatorStatus = 9
	AuthenticatorStatus_USER_VERIFICATION_UNSUPPORTED    AuthenticatorStatus = 10
	AuthenticatorStatus_ALGORITHM_UNSUPPORTED            AuthenticatorStatus = 11
	AuthenticatorStatus_EMPTY_ALLOW_CREDENTIALS          AuthenticatorStatus = 12
	AuthenticatorStatus_ANDROID_NOT_SUPPORTED_ERROR      AuthenticatorStatus = 13
	AuthenticatorStatus_PROTECTION_POLICY_INCONSISTENT   AuthenticatorStatus = 14
	AuthenticatorStatus_ABORT_ERROR                      AuthenticatorStatus = 15
	AuthenticatorStatus_OPAQUE_DOMAIN                    AuthenticatorStatus = 16
	AuthenticatorStatus_INVALID_PROTOCOL                 AuthenticatorStatus = 17
	AuthenticatorStatus_BAD_RELYING_PARTY_ID             AuthenticatorStatus = 18
	AuthenticatorStatus_UNKNOWN_ERROR                    AuthenticatorStatus = 19
)

// Enum value maps for AuthenticatorStatus.
var (
	AuthenticatorStatus_name = map[int32]string{
		0:  "SUCCESS",
		1:  "PENDING_REQUEST",
		2:  "NOT_ALLOWED_ERROR",
		3:  "INVALID_DOMAIN",
		4:  "INVALID_ICON_URL",
		5:  "CREDENTIAL_EXCLUDED",
		6:  "CREDENTIAL_NOT_RECOGNIZED",
		7:  "NOT_IMPLEMENTED",
		8:  "NOT_FOCUSED",
		9:  "RESIDENT_CREDENTIALS_UNSUPPORTED",
		10: "USER_VERIFICATION_UNSUPPORTED",
		11: "ALGORITHM_UNSUPPORTED",
		12: "EMPTY_ALLOW_CREDENTIALS",
		13: "ANDROID_NOT_SUPPORTED_ERROR",
		14: "PROTECTION_POLICY_INCONSISTENT",
		15: "ABORT_ERROR",
		16: "OPAQUE_DOMAIN",
		17: "INVALID_PROTOCOL",
		18: "BAD_RELYING_PARTY_ID",
		19: "UNKNOWN_ERROR",
	}
	AuthenticatorStatus_value = map[string]int32{
		"SUCCESS":                          0,
		"PENDING_REQUEST":                  1,
		"NOT_ALLOWED_ERROR":                2,
		"INVALID_DOMAIN":                   3,
		"INVALID_ICON_URL":                 4,
		"CREDENTIAL_EXCLUDED":              5,
		"CREDENTIAL_NOT_RECOGNIZED":        6,
		"NOT_IMPLEMENTED":                  7,
		"NOT_FOCUSED":                      8,
		"RESIDENT_CREDENTIALS_UNSUPPORTED": 9,
		"USER_VERIFICATION_UNSUPPORTED":    10,
		"ALGORITHM_UNSUPPORTED":            11,
		"EMPTY_ALLOW_CREDENTIALS":          12,
		"ANDROID_NOT_SUPPORTED_ERROR":      13,
		"PROTECTION_POLICY_INCONSISTENT":   14,
		"ABORT_ERROR":                      15,
		"OPAQUE_DOMAIN":                    16,
		"INVALID_PROTOCOL":                 17,
		"BAD_RELYING_PARTY_ID":             18,
		"UNKNOWN_ERROR":                    19,
	}
)

func (x AuthenticatorStatus) Enum() *AuthenticatorStatus {
	p := new(AuthenticatorStatus)
	*p = x
	return p
}

func (x AuthenticatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[0].Descriptor()
}

func (AuthenticatorStatus) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[0]
}

func (x AuthenticatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorStatus.Descriptor instead.
func (AuthenticatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{0}
}

type AuthenticatorTransport int32

const (
	AuthenticatorTransport_USB      AuthenticatorTransport = 0
	AuthenticatorTransport_NFC      AuthenticatorTransport = 1
	AuthenticatorTransport_BLE      AuthenticatorTransport = 2
	AuthenticatorTransport_CABLE    AuthenticatorTransport = 3
	AuthenticatorTransport_INTERNAL AuthenticatorTransport = 4
)

// Enum value maps for AuthenticatorTransport.
var (
	AuthenticatorTransport_name = map[int32]string{
		0: "USB",
		1: "NFC",
		2: "BLE",
		3: "CABLE",
		4: "INTERNAL",
	}
	AuthenticatorTransport_value = map[string]int32{
		"USB":      0,
		"NFC":      1,
		"BLE":      2,
		"CABLE":    3,
		"INTERNAL": 4,
	}
)

func (x AuthenticatorTransport) Enum() *AuthenticatorTransport {
	p := new(AuthenticatorTransport)
	*p = x
	return p
}

func (x AuthenticatorTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[1].Descriptor()
}

func (AuthenticatorTransport) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[1]
}

func (x AuthenticatorTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorTransport.Descriptor instead.
func (AuthenticatorTransport) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{1}
}

type UserVerificationRequirement int32

const (
	UserVerificationRequirement_REQUIRED    UserVerificationRequirement = 0
	UserVerificationRequirement_PREFERRED   UserVerificationRequirement = 1
	UserVerificationRequirement_DISCOURAGED UserVerificationRequirement = 2
)

// Enum value maps for UserVerificationRequirement.
var (
	UserVerificationRequirement_name = map[int32]string{
		0: "REQUIRED",
		1: "PREFERRED",
		2: "DISCOURAGED",
	}
	UserVerificationRequirement_value = map[string]int32{
		"REQUIRED":    0,
		"PREFERRED":   1,
		"DISCOURAGED": 2,
	}
)

func (x UserVerificationRequirement) Enum() *UserVerificationRequirement {
	p := new(UserVerificationRequirement)
	*p = x
	return p
}

func (x UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[2].Descriptor()
}

func (UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[2]
}

func (x UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserVerificationRequirement.Descriptor instead.
func (UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{2}
}

// See https://w3c.github.io/webauthn/#enumdef-attestationconveyancepreference
type AttestationConveyancePreference int32

const (
	AttestationConveyancePreference_NONE_ATTESTATION_PREFERENCE AttestationConveyancePreference = 0
	AttestationConveyancePreference_INDIRECT                    AttestationConveyancePreference = 1
	AttestationConveyancePreference_DIRECT                      AttestationConveyancePreference = 2
	// A non-standard addition that we hope will become standard. This indicates
	// that the RP desires individual attestaion from the device.
	AttestationConveyancePreference_ENTERPRISE AttestationConveyancePreference = 3
)

// Enum value maps for AttestationConveyancePreference.
var (
	AttestationConveyancePreference_name = map[int32]string{
		0: "NONE_ATTESTATION_PREFERENCE",
		1: "INDIRECT",
		2: "DIRECT",
		3: "ENTERPRISE",
	}
	AttestationConveyancePreference_value = map[string]int32{
		"NONE_ATTESTATION_PREFERENCE": 0,
		"INDIRECT":                    1,
		"DIRECT":                      2,
		"ENTERPRISE":                  3,
	}
)

func (x AttestationConveyancePreference) Enum() *AttestationConveyancePreference {
	p := new(AttestationConveyancePreference)
	*p = x
	return p
}

func (x AttestationConveyancePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestationConveyancePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[3].Descriptor()
}

func (AttestationConveyancePreference) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[3]
}

func (x AttestationConveyancePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestationConveyancePreference.Descriptor instead.
func (AttestationConveyancePreference) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{3}
}

// https://w3c.github.io/webauthn/#enumdef-authenticatorattachment.
type AuthenticatorAttachment int32

const (
	AuthenticatorAttachment_NO_PREFERENCE  AuthenticatorAttachment = 0
	AuthenticatorAttachment_PLATFORM       AuthenticatorAttachment = 1
	AuthenticatorAttachment_CROSS_PLATFORM AuthenticatorAttachment = 2
)

// Enum value maps for AuthenticatorAttachment.
var (
	AuthenticatorAttachment_name = map[int32]string{
		0: "NO_PREFERENCE",
		1: "PLATFORM",
		2: "CROSS_PLATFORM",
	}
	AuthenticatorAttachment_value = map[string]int32{
		"NO_PREFERENCE":  0,
		"PLATFORM":       1,
		"CROSS_PLATFORM": 2,
	}
)

func (x AuthenticatorAttachment) Enum() *AuthenticatorAttachment {
	p := new(AuthenticatorAttachment)
	*p = x
	return p
}

func (x AuthenticatorAttachment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticatorAttachment) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[4].Descriptor()
}

func (AuthenticatorAttachment) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[4]
}

func (x AuthenticatorAttachment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticatorAttachment.Descriptor instead.
func (AuthenticatorAttachment) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{4}
}

type ProtectionPolicy int32

const (
	// UNSPECIFIED means that no value was given at the Javascript level.
	ProtectionPolicy_UNSPECIFIED            ProtectionPolicy = 0
	ProtectionPolicy_NONE_PROTECTION_POLICY ProtectionPolicy = 1
	ProtectionPolicy_UV_OR_CRED_ID_REQUIRED ProtectionPolicy = 2
	ProtectionPolicy_UV_REQUIRED            ProtectionPolicy = 3
)

// Enum value maps for ProtectionPolicy.
var (
	ProtectionPolicy_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NONE_PROTECTION_POLICY",
		2: "UV_OR_CRED_ID_REQUIRED",
		3: "UV_REQUIRED",
	}
	ProtectionPolicy_value = map[string]int32{
		"UNSPECIFIED":            0,
		"NONE_PROTECTION_POLICY": 1,
		"UV_OR_CRED_ID_REQUIRED": 2,
		"UV_REQUIRED":            3,
	}
)

func (x ProtectionPolicy) Enum() *ProtectionPolicy {
	p := new(ProtectionPolicy)
	*p = x
	return p
}

func (x ProtectionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[5].Descriptor()
}

func (ProtectionPolicy) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[5]
}

func (x ProtectionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionPolicy.Descriptor instead.
func (ProtectionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{5}
}

type PublicKeyCredentialType int32

const (
	PublicKeyCredentialType_PUBLIC_KEY PublicKeyCredentialType = 0
)

// Enum value maps for PublicKeyCredentialType.
var (
	PublicKeyCredentialType_name = map[int32]string{
		0: "PUBLIC_KEY",
	}
	PublicKeyCredentialType_value = map[string]int32{
		"PUBLIC_KEY": 0,
	}
)

func (x PublicKeyCredentialType) Enum() *PublicKeyCredentialType {
	p := new(PublicKeyCredentialType)
	*p = x
	return p
}

func (x PublicKeyCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_models_fido_proto_enumTypes[6].Descriptor()
}

func (PublicKeyCredentialType) Type() protoreflect.EnumType {
	return &file_proto_auth_models_fido_proto_enumTypes[6]
}

func (x PublicKeyCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicKeyCredentialType.Descriptor instead.
func (PublicKeyCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{6}
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{0}
}

func (x *Url) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Credential information returned by both Authenticator::MakeCredential
// and Authenticator::GetAssertion.
type CommonCredentialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base64url encoding of |raw_id|.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An identifier for the credential.
	RawId []byte `protobuf:"bytes,2,opt,name=raw_id,json=rawId,proto3" json:"raw_id,omitempty"`
	// A blob of data containing the JSON serialization of client data passed
	// to the authenticator.
	ClientDataJson []byte `protobuf:"bytes,3,opt,name=client_data_json,json=clientDataJson,proto3" json:"client_data_json,omitempty"`
}

func (x *CommonCredentialInfo) Reset() {
	*x = CommonCredentialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCredentialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCredentialInfo) ProtoMessage() {}

func (x *CommonCredentialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCredentialInfo.ProtoReflect.Descriptor instead.
func (*CommonCredentialInfo) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{1}
}

func (x *CommonCredentialInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommonCredentialInfo) GetRawId() []byte {
	if x != nil {
		return x.RawId
	}
	return nil
}

func (x *CommonCredentialInfo) GetClientDataJson() []byte {
	if x != nil {
		return x.ClientDataJson
	}
	return nil
}

// The public key and attestation returned by Authenticator::MakeCredential.
type MakeCredentialAuthenticatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonCredentialInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// A blob of data returned by the authenticator after creating a credential.
	AttestationObject []byte `protobuf:"bytes,2,opt,name=attestation_object,json=attestationObject,proto3" json:"attestation_object,omitempty"`
	// A list of transports that the authenticator supports, with the transport
	// used for the registration as the first element.
	Transports []AuthenticatorTransport `protobuf:"varint,3,rep,packed,name=transports,proto3,enum=cryptohome.fido.AuthenticatorTransport" json:"transports,omitempty"`
	// True if getClientExtensionResults() called on the returned
	// PublicKeyCredential instance should contain an `hmacCreateSecret`
	// extension output. If so, |hmac_create_secret| contains the actual value.
	EchoHmacCreateSecret bool `protobuf:"varint,4,opt,name=echo_hmac_create_secret,json=echoHmacCreateSecret,proto3" json:"echo_hmac_create_secret,omitempty"`
	HmacCreateSecret     bool `protobuf:"varint,5,opt,name=hmac_create_secret,json=hmacCreateSecret,proto3" json:"hmac_create_secret,omitempty"`
}

func (x *MakeCredentialAuthenticatorResponse) Reset() {
	*x = MakeCredentialAuthenticatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCredentialAuthenticatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCredentialAuthenticatorResponse) ProtoMessage() {}

func (x *MakeCredentialAuthenticatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCredentialAuthenticatorResponse.ProtoReflect.Descriptor instead.
func (*MakeCredentialAuthenticatorResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{2}
}

func (x *MakeCredentialAuthenticatorResponse) GetInfo() *CommonCredentialInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MakeCredentialAuthenticatorResponse) GetAttestationObject() []byte {
	if x != nil {
		return x.AttestationObject
	}
	return nil
}

func (x *MakeCredentialAuthenticatorResponse) GetTransports() []AuthenticatorTransport {
	if x != nil {
		return x.Transports
	}
	return nil
}

func (x *MakeCredentialAuthenticatorResponse) GetEchoHmacCreateSecret() bool {
	if x != nil {
		return x.EchoHmacCreateSecret
	}
	return false
}

func (x *MakeCredentialAuthenticatorResponse) GetHmacCreateSecret() bool {
	if x != nil {
		return x.HmacCreateSecret
	}
	return false
}

type GetAssertionAuthenticatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonCredentialInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// A blob of data returned by the authenticator after generating an assertion.
	AuthenticatorData []byte `protobuf:"bytes,2,opt,name=authenticator_data,json=authenticatorData,proto3" json:"authenticator_data,omitempty"`
	// Cryptographic signature proving possession of the credential private key.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Only supported by CTAP devices, not by U2F devices.
	// Equivalent of the `user.id` passed into create().
	// Maximum 64 bytes.
	UserHandle []byte `protobuf:"bytes,4,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
	// True if getClientExtensionResults() called on the returned
	// PublicKeyCredential instance should contain an `appid` extension output.
	// If so, |appid_extension| contains the actual value.
	EchoAppidExtension bool `protobuf:"varint,5,opt,name=echo_appid_extension,json=echoAppidExtension,proto3" json:"echo_appid_extension,omitempty"`
	AppidExtension     bool `protobuf:"varint,6,opt,name=appid_extension,json=appidExtension,proto3" json:"appid_extension,omitempty"`
}

func (x *GetAssertionAuthenticatorResponse) Reset() {
	*x = GetAssertionAuthenticatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssertionAuthenticatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssertionAuthenticatorResponse) ProtoMessage() {}

func (x *GetAssertionAuthenticatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssertionAuthenticatorResponse.ProtoReflect.Descriptor instead.
func (*GetAssertionAuthenticatorResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{3}
}

func (x *GetAssertionAuthenticatorResponse) GetInfo() *CommonCredentialInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetAssertionAuthenticatorResponse) GetAuthenticatorData() []byte {
	if x != nil {
		return x.AuthenticatorData
	}
	return nil
}

func (x *GetAssertionAuthenticatorResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetAssertionAuthenticatorResponse) GetUserHandle() []byte {
	if x != nil {
		return x.UserHandle
	}
	return nil
}

func (x *GetAssertionAuthenticatorResponse) GetEchoAppidExtension() bool {
	if x != nil {
		return x.EchoAppidExtension
	}
	return false
}

func (x *GetAssertionAuthenticatorResponse) GetAppidExtension() bool {
	if x != nil {
		return x.AppidExtension
	}
	return false
}

// Information about the relying party. These fields take arbitrary input.
type PublicKeyCredentialRpEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ASCII serialization of an origin.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Friendly name associated with the relying party intended for display.
	// e.g. "Acme Corporation".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Image associated with the entity. e.g. a relying party's logo.
	Icon *Url `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *PublicKeyCredentialRpEntity) Reset() {
	*x = PublicKeyCredentialRpEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialRpEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialRpEntity) ProtoMessage() {}

func (x *PublicKeyCredentialRpEntity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialRpEntity.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialRpEntity) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{4}
}

func (x *PublicKeyCredentialRpEntity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicKeyCredentialRpEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicKeyCredentialRpEntity) GetIcon() *Url {
	if x != nil {
		return x.Icon
	}
	return nil
}

// Information about the account held by the user. These fields take
// arbitrary input.
type PublicKeyCredentialUserEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for a user account An opaque byte sequence with a
	// maximum size of 64 bytes.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Friendly name associated with the entity intended for display.
	// e.g."john.p.smith@example.com" or "+14255551234" for a user.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Image associated with the entity. For example, a user's avatar.
	Icon *Url `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// Contains a friendly name for the user account (e.g., "John P. Smith").
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *PublicKeyCredentialUserEntity) Reset() {
	*x = PublicKeyCredentialUserEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialUserEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialUserEntity) ProtoMessage() {}

func (x *PublicKeyCredentialUserEntity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialUserEntity.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialUserEntity) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{5}
}

func (x *PublicKeyCredentialUserEntity) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PublicKeyCredentialUserEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicKeyCredentialUserEntity) GetIcon() *Url {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *PublicKeyCredentialUserEntity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Parameters that are used to generate an appropriate public key credential.
type PublicKeyCredentialParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                PublicKeyCredentialType `protobuf:"varint,1,opt,name=type,proto3,enum=cryptohome.fido.PublicKeyCredentialType" json:"type,omitempty"`
	AlgorithmIdentifier int32                   `protobuf:"varint,2,opt,name=algorithm_identifier,json=algorithmIdentifier,proto3" json:"algorithm_identifier,omitempty"`
}

func (x *PublicKeyCredentialParameters) Reset() {
	*x = PublicKeyCredentialParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialParameters) ProtoMessage() {}

func (x *PublicKeyCredentialParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialParameters.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialParameters) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{6}
}

func (x *PublicKeyCredentialParameters) GetType() PublicKeyCredentialType {
	if x != nil {
		return x.Type
	}
	return PublicKeyCredentialType_PUBLIC_KEY
}

func (x *PublicKeyCredentialParameters) GetAlgorithmIdentifier() int32 {
	if x != nil {
		return x.AlgorithmIdentifier
	}
	return 0
}

// Cloud-assisted BLE extension data for getAssertion.
type CableAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The caBLE version requested.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// A 16-byte ephemeral identifier that the browser will advertise.
	ClientEid []byte `protobuf:"bytes,2,opt,name=client_eid,json=clientEid,proto3" json:"client_eid,omitempty"`
	// A 16-byte ephemeral identifier that the browser expects to receive from a
	// responding authenticator.
	AuthenticatorEid []byte `protobuf:"bytes,3,opt,name=authenticator_eid,json=authenticatorEid,proto3" json:"authenticator_eid,omitempty"`
	// A 32-byte pre-key used to compute a session key to encrypt messages between
	// a paired client and authenticator following a successful discovery.
	SessionPreKey []byte `protobuf:"bytes,4,opt,name=session_pre_key,json=sessionPreKey,proto3" json:"session_pre_key,omitempty"`
}

func (x *CableAuthentication) Reset() {
	*x = CableAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableAuthentication) ProtoMessage() {}

func (x *CableAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableAuthentication.ProtoReflect.Descriptor instead.
func (*CableAuthentication) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{7}
}

func (x *CableAuthentication) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CableAuthentication) GetClientEid() []byte {
	if x != nil {
		return x.ClientEid
	}
	return nil
}

func (x *CableAuthentication) GetAuthenticatorEid() []byte {
	if x != nil {
		return x.AuthenticatorEid
	}
	return nil
}

func (x *CableAuthentication) GetSessionPreKey() []byte {
	if x != nil {
		return x.SessionPreKey
	}
	return nil
}

// Cloud-assisted BLE extension data for makeCredential.
type CableRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The caBLE versions supported by the relying party.
	Versions []byte `protobuf:"bytes,1,opt,name=versions,proto3" json:"versions,omitempty"`
	// The 65-byte ECDSA ephemeral public key belonging to the relying party
	// for use in establishing an encrypted caBLE channel with an authenticator.
	RelyingPartyPublicKey []byte `protobuf:"bytes,2,opt,name=relying_party_public_key,json=relyingPartyPublicKey,proto3" json:"relying_party_public_key,omitempty"`
}

func (x *CableRegistration) Reset() {
	*x = CableRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableRegistration) ProtoMessage() {}

func (x *CableRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableRegistration.ProtoReflect.Descriptor instead.
func (*CableRegistration) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{8}
}

func (x *CableRegistration) GetVersions() []byte {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *CableRegistration) GetRelyingPartyPublicKey() []byte {
	if x != nil {
		return x.RelyingPartyPublicKey
	}
	return nil
}

// Parameters passed into calls to GetAssertion.
type PublicKeyCredentialRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An indefinite-length blob passed from the the relying party server,
	// to be sent to an authenticator for signing
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// Time to wait for an authenticator to complete an operation.
	// Adjusted to fall within a client-defined range.
	AdjustedTimeout int64 `protobuf:"varint,2,opt,name=adjusted_timeout,json=adjustedTimeout,proto3" json:"adjusted_timeout,omitempty"`
	// An ASCII serialization of the origin claimed by the relying party.
	RelyingPartyId string `protobuf:"bytes,3,opt,name=relying_party_id,json=relyingPartyId,proto3" json:"relying_party_id,omitempty"`
	// A list of credentials the relying party knows about and would
	// accept as the signing credential.
	AllowCredentials []*PublicKeyCredentialDescriptor `protobuf:"bytes,4,rep,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// Indicates the relying party's need for a user-verifying authenticator.
	UserVerification UserVerificationRequirement `protobuf:"varint,5,opt,name=user_verification,json=userVerification,proto3,enum=cryptohome.fido.UserVerificationRequirement" json:"user_verification,omitempty"`
	// The contents of the appid extension, if any. See
	// https://w3c.github.io/webauthn/#sctn-appid-extension
	Appid string `protobuf:"bytes,6,opt,name=appid,proto3" json:"appid,omitempty"`
	// The contents of the cloud assisted BLE extension for getAssertion
	// requests, if any. This extension permits browsers and authenticator
	// devices to establish a pairingless BLE connection.
	// TODO(crbug.com/842371): Add link to spec when available.
	// There may be multiple sets if multiple caBLE credentials have been
	// registered with the relying party.
	CableAuthenticationData []*CableAuthentication `protobuf:"bytes,7,rep,name=cable_authentication_data,json=cableAuthenticationData,proto3" json:"cable_authentication_data,omitempty"`
}

func (x *PublicKeyCredentialRequestOptions) Reset() {
	*x = PublicKeyCredentialRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialRequestOptions) ProtoMessage() {}

func (x *PublicKeyCredentialRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialRequestOptions.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialRequestOptions) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{9}
}

func (x *PublicKeyCredentialRequestOptions) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *PublicKeyCredentialRequestOptions) GetAdjustedTimeout() int64 {
	if x != nil {
		return x.AdjustedTimeout
	}
	return 0
}

func (x *PublicKeyCredentialRequestOptions) GetRelyingPartyId() string {
	if x != nil {
		return x.RelyingPartyId
	}
	return ""
}

func (x *PublicKeyCredentialRequestOptions) GetAllowCredentials() []*PublicKeyCredentialDescriptor {
	if x != nil {
		return x.AllowCredentials
	}
	return nil
}

func (x *PublicKeyCredentialRequestOptions) GetUserVerification() UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return UserVerificationRequirement_REQUIRED
}

func (x *PublicKeyCredentialRequestOptions) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *PublicKeyCredentialRequestOptions) GetCableAuthenticationData() []*CableAuthentication {
	if x != nil {
		return x.CableAuthenticationData
	}
	return nil
}

// See https://w3c.github.io/webauthn/#dictdef-authenticatorselectioncriteria.
type AuthenticatorSelectionCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter authenticators by attachment type.
	AuthenticatorAttachment AuthenticatorAttachment `protobuf:"varint,1,opt,name=authenticator_attachment,json=authenticatorAttachment,proto3,enum=cryptohome.fido.AuthenticatorAttachment" json:"authenticator_attachment,omitempty"`
	// Whether the authenticator should store the created key so that the key
	// can later be selected given only an RP ID (e.g. when |allow_credentials|
	// is empty).
	RequireResidentKey bool `protobuf:"varint,2,opt,name=require_resident_key,json=requireResidentKey,proto3" json:"require_resident_key,omitempty"`
	// Indicates the relying party's need for a user-verifying authenticator.
	UserVerification UserVerificationRequirement `protobuf:"varint,3,opt,name=user_verification,json=userVerification,proto3,enum=cryptohome.fido.UserVerificationRequirement" json:"user_verification,omitempty"`
}

func (x *AuthenticatorSelectionCriteria) Reset() {
	*x = AuthenticatorSelectionCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorSelectionCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorSelectionCriteria) ProtoMessage() {}

func (x *AuthenticatorSelectionCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorSelectionCriteria.ProtoReflect.Descriptor instead.
func (*AuthenticatorSelectionCriteria) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{10}
}

func (x *AuthenticatorSelectionCriteria) GetAuthenticatorAttachment() AuthenticatorAttachment {
	if x != nil {
		return x.AuthenticatorAttachment
	}
	return AuthenticatorAttachment_NO_PREFERENCE
}

func (x *AuthenticatorSelectionCriteria) GetRequireResidentKey() bool {
	if x != nil {
		return x.RequireResidentKey
	}
	return false
}

func (x *AuthenticatorSelectionCriteria) GetUserVerification() UserVerificationRequirement {
	if x != nil {
		return x.UserVerification
	}
	return UserVerificationRequirement_REQUIRED
}

// Parameters passed into calls to MakeCredential.
type PublicKeyCredentialCreationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the relying party and user entities, respectively.
	// Used by the authenticator to create or retrieve an appropriate public key
	// credential for the requested account.
	RelyingParty *PublicKeyCredentialRpEntity   `protobuf:"bytes,1,opt,name=relying_party,json=relyingParty,proto3" json:"relying_party,omitempty"`
	User         *PublicKeyCredentialUserEntity `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// An indefinite-length blob passed from the the relying party server,
	// to be sent to an authenticator to make a credential.
	Challenge []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// Parameters defining the type of created credential that the relying
	// party would accept.
	PublicKeyParameters []*PublicKeyCredentialParameters `protobuf:"bytes,4,rep,name=public_key_parameters,json=publicKeyParameters,proto3" json:"public_key_parameters,omitempty"`
	// Time in ms to wait for an authenticator to complete an operation.
	// Adjusted to fall within a client-defined range.
	AdjustedTimeout int64 `protobuf:"varint,5,opt,name=adjusted_timeout,json=adjustedTimeout,proto3" json:"adjusted_timeout,omitempty"`
	// A list of credentials the relying party knows about. If an
	// authenticator has one of these credentials, it should not
	// create a new one
	ExcludeCredentials []*PublicKeyCredentialDescriptor `protobuf:"bytes,6,rep,name=exclude_credentials,json=excludeCredentials,proto3" json:"exclude_credentials,omitempty"`
	// Specify the relying party's authenticator attribute requirements.
	AuthenticatorSelection *AuthenticatorSelectionCriteria `protobuf:"bytes,7,opt,name=authenticator_selection,json=authenticatorSelection,proto3" json:"authenticator_selection,omitempty"`
	// Specifies whether the RP wants attestation information for the created
	// credential.
	Attestation AttestationConveyancePreference `protobuf:"varint,8,opt,name=attestation,proto3,enum=cryptohome.fido.AttestationConveyancePreference" json:"attestation,omitempty"`
	// The contents of the cloud assisted BLE extension for makeCredential
	// requests, if any. This extension permits browsers and authenticator
	// devices to establish a pairingless BLE connection.
	// TODO(crbug.com/842371): Add link to spec when available.
	CableRegistrationData *CableRegistration `protobuf:"bytes,9,opt,name=cable_registration_data,json=cableRegistrationData,proto3" json:"cable_registration_data,omitempty"`
	// The contents of the hmacCreateSecret extension, if any. See
	// https://fidoalliance.org/specs/fido-v2.0-rd-20180702/fido-client-to-authenticator-protocol-v2.0-rd-20180702.html#sctn-hmac-secret-extension
	HmacCreateSecret bool `protobuf:"varint,10,opt,name=hmac_create_secret,json=hmacCreateSecret,proto3" json:"hmac_create_secret,omitempty"`
	// The value of the `credentialProtectionPolicy` extension, or UNSPECIFIED if
	// none was provided
	ProtectionPolicy ProtectionPolicy `protobuf:"varint,11,opt,name=protection_policy,json=protectionPolicy,proto3,enum=cryptohome.fido.ProtectionPolicy" json:"protection_policy,omitempty"`
	// The value of the `enforceCredentialProtectionPolicy`, or false if none was
	// provided
	EnforceProtectionPolicy bool   `protobuf:"varint,12,opt,name=enforce_protection_policy,json=enforceProtectionPolicy,proto3" json:"enforce_protection_policy,omitempty"`
	AppidExclude            string `protobuf:"bytes,13,opt,name=appid_exclude,json=appidExclude,proto3" json:"appid_exclude,omitempty"`
}

func (x *PublicKeyCredentialCreationOptions) Reset() {
	*x = PublicKeyCredentialCreationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialCreationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialCreationOptions) ProtoMessage() {}

func (x *PublicKeyCredentialCreationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialCreationOptions.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialCreationOptions) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{11}
}

func (x *PublicKeyCredentialCreationOptions) GetRelyingParty() *PublicKeyCredentialRpEntity {
	if x != nil {
		return x.RelyingParty
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetUser() *PublicKeyCredentialUserEntity {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetPublicKeyParameters() []*PublicKeyCredentialParameters {
	if x != nil {
		return x.PublicKeyParameters
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetAdjustedTimeout() int64 {
	if x != nil {
		return x.AdjustedTimeout
	}
	return 0
}

func (x *PublicKeyCredentialCreationOptions) GetExcludeCredentials() []*PublicKeyCredentialDescriptor {
	if x != nil {
		return x.ExcludeCredentials
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetAuthenticatorSelection() *AuthenticatorSelectionCriteria {
	if x != nil {
		return x.AuthenticatorSelection
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetAttestation() AttestationConveyancePreference {
	if x != nil {
		return x.Attestation
	}
	return AttestationConveyancePreference_NONE_ATTESTATION_PREFERENCE
}

func (x *PublicKeyCredentialCreationOptions) GetCableRegistrationData() *CableRegistration {
	if x != nil {
		return x.CableRegistrationData
	}
	return nil
}

func (x *PublicKeyCredentialCreationOptions) GetHmacCreateSecret() bool {
	if x != nil {
		return x.HmacCreateSecret
	}
	return false
}

func (x *PublicKeyCredentialCreationOptions) GetProtectionPolicy() ProtectionPolicy {
	if x != nil {
		return x.ProtectionPolicy
	}
	return ProtectionPolicy_UNSPECIFIED
}

func (x *PublicKeyCredentialCreationOptions) GetEnforceProtectionPolicy() bool {
	if x != nil {
		return x.EnforceProtectionPolicy
	}
	return false
}

func (x *PublicKeyCredentialCreationOptions) GetAppidExclude() string {
	if x != nil {
		return x.AppidExclude
	}
	return ""
}

// Describes the credentials that the relying party already knows about for
// the given account. If any of these are known to the authenticator,
// it should not create a new credential.
type PublicKeyCredentialDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PublicKeyCredentialType `protobuf:"varint,1,opt,name=type,proto3,enum=cryptohome.fido.PublicKeyCredentialType" json:"type,omitempty"`
	// Blob representing a credential key handle. Up to 255 bytes for
	// U2F authenticators.
	Id         []byte                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Transports []AuthenticatorTransport `protobuf:"varint,3,rep,packed,name=transports,proto3,enum=cryptohome.fido.AuthenticatorTransport" json:"transports,omitempty"`
}

func (x *PublicKeyCredentialDescriptor) Reset() {
	*x = PublicKeyCredentialDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_auth_models_fido_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyCredentialDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyCredentialDescriptor) ProtoMessage() {}

func (x *PublicKeyCredentialDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_models_fido_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyCredentialDescriptor.ProtoReflect.Descriptor instead.
func (*PublicKeyCredentialDescriptor) Descriptor() ([]byte, []int) {
	return file_proto_auth_models_fido_proto_rawDescGZIP(), []int{12}
}

func (x *PublicKeyCredentialDescriptor) GetType() PublicKeyCredentialType {
	if x != nil {
		return x.Type
	}
	return PublicKeyCredentialType_PUBLIC_KEY
}

func (x *PublicKeyCredentialDescriptor) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PublicKeyCredentialDescriptor) GetTransports() []AuthenticatorTransport {
	if x != nil {
		return x.Transports
	}
	return nil
}

var File_proto_auth_models_fido_proto protoreflect.FileDescriptor

var file_proto_auth_models_fido_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x22,
	0x17, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f,
	0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x23, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x63, 0x68, 0x6f, 0x48, 0x6d, 0x61, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x68, 0x6d, 0x61, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0xa7, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f,
	0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x65, 0x63, 0x68, 0x6f, 0x41, 0x70, 0x70, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x1b, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x55,
	0x72, 0x6c, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x55,
	0x72, 0x6c, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa3,
	0x01, 0x0a, 0x13, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x68, 0x0a, 0x11, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xc6,
	0x03, 0x0a, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e,
	0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x63, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x59, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x07, 0x0a,
	0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d,
	0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5f, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d,
	0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x6d, 0x61, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x69, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x66,
	0x69, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x68, 0x6f,
	0x6d, 0x65, 0x2e, 0x66, 0x69, 0x64, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2a, 0x83, 0x04, 0x0a, 0x13, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x53, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50,
	0x41, 0x51, 0x55, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x10, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x59, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13,
	0x2a, 0x4c, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53,
	0x42, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x4b,
	0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x1f, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x17, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x56,
	0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x56, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x6c, 0x75, 0x66, 0x66, 0x79, 0x2d, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x2f, 0x66, 0x6c,
	0x75, 0x66, 0x66, 0x79, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x6f, 0x69,
	0x64, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_auth_models_fido_proto_rawDescOnce sync.Once
	file_proto_auth_models_fido_proto_rawDescData = file_proto_auth_models_fido_proto_rawDesc
)

func file_proto_auth_models_fido_proto_rawDescGZIP() []byte {
	file_proto_auth_models_fido_proto_rawDescOnce.Do(func() {
		file_proto_auth_models_fido_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_auth_models_fido_proto_rawDescData)
	})
	return file_proto_auth_models_fido_proto_rawDescData
}

var file_proto_auth_models_fido_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_auth_models_fido_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_auth_models_fido_proto_goTypes = []interface{}{
	(AuthenticatorStatus)(0),                    // 0: cryptohome.fido.AuthenticatorStatus
	(AuthenticatorTransport)(0),                 // 1: cryptohome.fido.AuthenticatorTransport
	(UserVerificationRequirement)(0),            // 2: cryptohome.fido.UserVerificationRequirement
	(AttestationConveyancePreference)(0),        // 3: cryptohome.fido.AttestationConveyancePreference
	(AuthenticatorAttachment)(0),                // 4: cryptohome.fido.AuthenticatorAttachment
	(ProtectionPolicy)(0),                       // 5: cryptohome.fido.ProtectionPolicy
	(PublicKeyCredentialType)(0),                // 6: cryptohome.fido.PublicKeyCredentialType
	(*Url)(nil),                                 // 7: cryptohome.fido.Url
	(*CommonCredentialInfo)(nil),                // 8: cryptohome.fido.CommonCredentialInfo
	(*MakeCredentialAuthenticatorResponse)(nil), // 9: cryptohome.fido.MakeCredentialAuthenticatorResponse
	(*GetAssertionAuthenticatorResponse)(nil),   // 10: cryptohome.fido.GetAssertionAuthenticatorResponse
	(*PublicKeyCredentialRpEntity)(nil),         // 11: cryptohome.fido.PublicKeyCredentialRpEntity
	(*PublicKeyCredentialUserEntity)(nil),       // 12: cryptohome.fido.PublicKeyCredentialUserEntity
	(*PublicKeyCredentialParameters)(nil),       // 13: cryptohome.fido.PublicKeyCredentialParameters
	(*CableAuthentication)(nil),                 // 14: cryptohome.fido.CableAuthentication
	(*CableRegistration)(nil),                   // 15: cryptohome.fido.CableRegistration
	(*PublicKeyCredentialRequestOptions)(nil),   // 16: cryptohome.fido.PublicKeyCredentialRequestOptions
	(*AuthenticatorSelectionCriteria)(nil),      // 17: cryptohome.fido.AuthenticatorSelectionCriteria
	(*PublicKeyCredentialCreationOptions)(nil),  // 18: cryptohome.fido.PublicKeyCredentialCreationOptions
	(*PublicKeyCredentialDescriptor)(nil),       // 19: cryptohome.fido.PublicKeyCredentialDescriptor
}
var file_proto_auth_models_fido_proto_depIdxs = []int32{
	8,  // 0: cryptohome.fido.MakeCredentialAuthenticatorResponse.info:type_name -> cryptohome.fido.CommonCredentialInfo
	1,  // 1: cryptohome.fido.MakeCredentialAuthenticatorResponse.transports:type_name -> cryptohome.fido.AuthenticatorTransport
	8,  // 2: cryptohome.fido.GetAssertionAuthenticatorResponse.info:type_name -> cryptohome.fido.CommonCredentialInfo
	7,  // 3: cryptohome.fido.PublicKeyCredentialRpEntity.icon:type_name -> cryptohome.fido.Url
	7,  // 4: cryptohome.fido.PublicKeyCredentialUserEntity.icon:type_name -> cryptohome.fido.Url
	6,  // 5: cryptohome.fido.PublicKeyCredentialParameters.type:type_name -> cryptohome.fido.PublicKeyCredentialType
	19, // 6: cryptohome.fido.PublicKeyCredentialRequestOptions.allow_credentials:type_name -> cryptohome.fido.PublicKeyCredentialDescriptor
	2,  // 7: cryptohome.fido.PublicKeyCredentialRequestOptions.user_verification:type_name -> cryptohome.fido.UserVerificationRequirement
	14, // 8: cryptohome.fido.PublicKeyCredentialRequestOptions.cable_authentication_data:type_name -> cryptohome.fido.CableAuthentication
	4,  // 9: cryptohome.fido.AuthenticatorSelectionCriteria.authenticator_attachment:type_name -> cryptohome.fido.AuthenticatorAttachment
	2,  // 10: cryptohome.fido.AuthenticatorSelectionCriteria.user_verification:type_name -> cryptohome.fido.UserVerificationRequirement
	11, // 11: cryptohome.fido.PublicKeyCredentialCreationOptions.relying_party:type_name -> cryptohome.fido.PublicKeyCredentialRpEntity
	12, // 12: cryptohome.fido.PublicKeyCredentialCreationOptions.user:type_name -> cryptohome.fido.PublicKeyCredentialUserEntity
	13, // 13: cryptohome.fido.PublicKeyCredentialCreationOptions.public_key_parameters:type_name -> cryptohome.fido.PublicKeyCredentialParameters
	19, // 14: cryptohome.fido.PublicKeyCredentialCreationOptions.exclude_credentials:type_name -> cryptohome.fido.PublicKeyCredentialDescriptor
	17, // 15: cryptohome.fido.PublicKeyCredentialCreationOptions.authenticator_selection:type_name -> cryptohome.fido.AuthenticatorSelectionCriteria
	3,  // 16: cryptohome.fido.PublicKeyCredentialCreationOptions.attestation:type_name -> cryptohome.fido.AttestationConveyancePreference
	15, // 17: cryptohome.fido.PublicKeyCredentialCreationOptions.cable_registration_data:type_name -> cryptohome.fido.CableRegistration
	5,  // 18: cryptohome.fido.PublicKeyCredentialCreationOptions.protection_policy:type_name -> cryptohome.fido.ProtectionPolicy
	6,  // 19: cryptohome.fido.PublicKeyCredentialDescriptor.type:type_name -> cryptohome.fido.PublicKeyCredentialType
	1,  // 20: cryptohome.fido.PublicKeyCredentialDescriptor.transports:type_name -> cryptohome.fido.AuthenticatorTransport
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_auth_models_fido_proto_init() }
func file_proto_auth_models_fido_proto_init() {
	if File_proto_auth_models_fido_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_auth_models_fido_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCredentialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCredentialAuthenticatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssertionAuthenticatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialRpEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialUserEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorSelectionCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialCreationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_auth_models_fido_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyCredentialDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_auth_models_fido_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_auth_models_fido_proto_goTypes,
		DependencyIndexes: file_proto_auth_models_fido_proto_depIdxs,
		EnumInfos:         file_proto_auth_models_fido_proto_enumTypes,
		MessageInfos:      file_proto_auth_models_fido_proto_msgTypes,
	}.Build()
	File_proto_auth_models_fido_proto = out.File
	file_proto_auth_models_fido_proto_rawDesc = nil
	file_proto_auth_models_fido_proto_goTypes = nil
	file_proto_auth_models_fido_proto_depIdxs = nil
}
