syntax = "proto3";

option go_package = "github.com/fluffy-bunny/fluffycore-rage-identity/proto/types/webauthn;webauthn";

package proto.types.webauthn;

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";

message Credential {
    // user friendly name to identity the credential
    string name = 1;
    // A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
    bytes i_d = 2;

	  // The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
	  // a Relying Party at registration time (see also public key credential). The private key portion of the credential key
	  // pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
	  // used as the attestation key pair, see self attestation for details.
    bytes public_key = 3;

	  // The attestation format used (if any) by the authenticator when creating the credential.
    string attestation_type = 4;

	// The transport types the authenticator supports.
    repeated string transport = 5; 

	// The commonly stored flags.
    CredentialFlags flags = 6;

    // The Authenticator information for a given certificate
    Authenticator authenticator = 7;
 
}
message CredentialFlags {
	// Flag UP indicates the users presence.
    bool user_present = 1;

    // Flag UV indicates the user verified.
    bool user_verified = 2;

	// Flag BE indicates the credential is able to be backed up and/or sync'd between devices. This should NEVER change.
    bool backup_eligible = 3;

    // Flag BS indicates the credential has been backed up and/or sync'd. This value can change but it's recommended
	// that RP's keep track of this value.
    bool backup_state = 4;
}

message Authenticator {
	// The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
    // identifier of the authenticator model being sought.
    bytes a_a_g_u_i_d = 1;

  	// SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
	// with the new sign_count value returned in the assertionâ€™s authenticator data. If this new
	// signCount value is less than or equal to the stored value, a cloned authenticator may
	// exist, or the authenticator may be malfunctioning.
    uint32 sign_count = 2;

    // CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
	// credential private key may exist and are being used in parallel. Relying Parties should incorporate
	// this information into their risk scoring. Whether the Relying Party updates the stored signature
	// counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
    bool clone_warning = 3;

	// Attachment is the authenticatorAttachment value returned by the request.
    string attachment = 4;

    string friendly_name = 5;
}
 

message CredentialArrayUpdate {
    message Granular{
        repeated Credential add = 1;
        repeated bytes      remove_a_a_g_u_i_ds = 2;
     }
     oneof update {
        Granular granular = 1;
        google.protobuf.BoolValue delete_all = 2;
     }
}