# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: CI

on:
  push:
    branches: ["**"]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".vscode/**"
      - ".github/dependabot.yml"
      - ".env"
      - "docker-compose.yml"
      - "docker/**"
  pull_request:
    paths-ignore:
      - "**.md"
    branches: [main]

env:
  BINARY: "server"
  GO_VERSION: "1.23"
  BUILD_PATH: "./cmd/server"
  IMAGE_NAME: "ghstahl/fluffycore.rage-identity"
  BASE_VERSION: "1.0.0"
  BLAZOR_RAGE_VERSION: "v0.0.17"
jobs:
  pre_flight:
    runs-on: ubuntu-latest

    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
    steps:
      - name: Establish tags and versions
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  build_react_apps:
    if: false
    runs-on: ubuntu-latest
    needs: [pre_flight]
    steps:
      - name: Echo Tags
        run: |
          echo new_tag: ${{needs.pre_flight.outputs.new_tag}}

      - uses: actions/checkout@v4

      - name: build client/account-management
        run: |
          Set-Location -Path "client/account-management"  
          Get-ChildItem -Path "."

          yarn install
          yarn build
          $destination = "..\..\cmd\server\static\account-management"
          if (-not (Test-Path -Path $destination -PathType Container)) {
              New-Item -Path $destination -ItemType Directory -Force
          }
          Get-ChildItem -Path "."

          copy-item -Path ".\account-management\*" -Destination $destination -Recurse -Force
        shell: pwsh

      - name: build client/oidc-flows
        run: |
          Set-Location -Path "client/oidc-flows"  
          Get-ChildItem -Path "."

          yarn install
          yarn build
          $destination = "..\..\cmd\server\static\oidc-flows"
          if (-not (Test-Path -Path $destination -PathType Container)) {
              New-Item -Path $destination -ItemType Directory -Force
          }
          Get-ChildItem -Path "."

          copy-item -Path ".\oidc-flows\*" -Destination $destination -Recurse -Force
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: static_build
          path: "cmd/server/static/"
  build:
    runs-on: ubuntu-latest
    needs: [pre_flight]
    steps:
      - name: Echo Tags
        run: |
          echo new_tag: ${{needs.pre_flight.outputs.new_tag}}
      #          echo changelog: ${{needs.pre_flight.outputs.changelog}}
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "^${{ env.GO_VERSION }}"

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

    # Create and post docker image
  build-docker-push-image:
    runs-on: ubuntu-latest
    needs: [pre_flight, build]

    steps:
      - name: Echo Tags
        run: |
          echo new_tag: ${{needs.pre_flight.outputs.new_tag}} 
          echo changelog: ${{needs.pre_flight.outputs.changelog}}

      - uses: actions/checkout@v4
        with:
          submodules: true

      # Download and extract asset
      # https://github.com/fluffy-bunny/fluffycore-rage-identity-blazor/releases/download/v0.0.3/static-files.zip
      - name: Download and extract asset
        run: |
          ASSET_URL="https://github.com/fluffy-bunny/fluffycore-rage-identity-blazor/releases/download/${{ env.BLAZOR_RAGE_VERSION }}/static-files.zip"


          DEST_DIR="./blazorassets"

          # Download the asset
          curl -L $ASSET_URL -o static-files.zip

          # Extract the asset
          unzip static-files.zip -d $DEST_DIR

          # Clean up
          rm static-files.zip

          echo "Asset downloaded and extracted to $DEST_DIR"

      # Copy and replace files
      - name: Copy and replace files
        run: |
          rm -rf ./cmd/server/static/blazor/oidc-login-ui
          rm -rf ./cmd/server/static/blazor/management
          cp -r ./blazorassets/static-files/oidc-login-ui ./cmd/server/static/blazor/oidc-login-ui
          cp -r ./blazorassets/static-files/management ./cmd/server/static/blazor/management
          cp -r ./production/static/blazor ./cmd/server/static/blazor

      # List the files and directories
      - name: List files and directories
        run: |
          ls -l ./cmd/server/static/blazor
      - uses: actions/setup-node@v4
        if: false
        with:
          node-version: "20.x"
          check-latest: true

      - name: Download Artifact
        if: false
        uses: actions/download-artifact@v4
        with:
          name: static_build
          path: "cmd/server/static/"

      - name: Display structure of downloaded files
        run: ls -R "cmd/server/static/"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerImage: ${{ env.IMAGE_NAME }}

      - name: Build and push Base
        id: docker_build
        uses: docker/build-push-action@v6
        env:
          version: ${{ steps.vtl.outputs.ver_semVerNoMeta }}
          date: ${{ steps.vtl.outputs.ver_created }}
          commit: ${{ github.sha }}
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./build/Dockerfile
          push: ${{ steps.vtl.outputs.docker_push }}
          tags: ${{ steps.vtl.outputs.docker_tags }}
          labels: ${{ steps.vtl.outputs.oci_labels }}
          build-args: |
            version
            date
            commit

      - name: Image digest docker_build
        run: echo ${{ steps.docker_build.outputs.digest }}
